# # #  to find all pdf files in a certain directory
# # #
# # #
# # # # import PyPDF2, os
# # # #    # Get all the PDF filenames.
# # # #    pdfFiles = []
# # # #    for filename in os.listdir('.'):
# # # #        if filename.endswith('.pdf'):
# # # # ❷         pdfFiles.append(filename)
# # # # ❸ pdfFiles.sort(key=str.lower)
# # # #
# # # # ❹ pdfWriter = PyPDF2.PdfFileWriter()
# # #
# # #
# # #
# # # ############################################################################## PDFFFFFFFFFF
# # #
# # # from PyPDF2 import PdfFileReader
# # # # import pandas as pd
# # # # text = []
# # # #
# # # #
# # # # def text_extractor(path):
# # # #     global text
# # # #     with open(path, 'rb') as f:
# # # #         pdf = PdfFileReader(f)
# # # #         page = pdf.getPage(0)
# # # #         text = page.extractText()
# # # #     return text
# # # #
# # # #
# # # # def text_analyser(text):
# # # #     text_df = pd.DataFrame()
# # # #
# # # #     text_list = text.split("  ")
# # # #     text_df["text"] = text_list
# # # #     print(text_df["text"])
# # # #     print(text_df[text_df["text"].str.contains('And')])
# # # #
# # # #     i = 1
# # # #     for i in range(text_df["text"].count()):
# # # #         it_string = text_df.loc[i, "text"]
# # # #         search_word = "And"
# # # #         if text_df.loc[i, "text"].find(search_word) > 0:
# # # #             an_string = it_string.partition(search_word)[2]
# # # #             # print(an_string)
# # # #             # print("And found++++++++++++++++++++++++++++")
# # # #         # else:
# # # #             # print(it_string)
# # # #             # print("no And found-------------------------")
# # # #
# # # #
# # # # if __name__ == '__main__':
# # # #     path = 'sample.pdf'
# # # #     text_extractor(path)
# # # #     text_analyser(text)
# # # ############################################################################## EXCELLLLLLLLL
# # #
# # # import pandas as pd
# # # import xlrd
# # # import tkinter as tk
# # # from tkinter import *
# # # from tkinter import filedialog
# # # from PyPDF2 import PdfFileReader
# # # import io
# # # # from pandas.compat import StringIO
# # #
# # #
# # # # <editor-fold desc="column names">
# # # # ### Job No    Observations    Service Class   Start Date  Finish Date   Rig   Job Status  Region  Country     Location
# # # # Location Type   Customer    Customer Name   Type of invoicing   Job Type    Fise Coordinator    Critical Claim
# # # # Intelligent Completions     Does not follow TS Guidelines     Other Technical Risks   forecasted_or_spot    Agreement
# # # # Offer   Operator    PO  Company Man Company Man E - Mail    Phone No    Directions to Rig
# # # # Relevant Chemical Hazzard Exposure Customer Docs  # 1	Customer Docs # 2	Bill to	    Requester	Ship to address
# # # # SO	    Sold to#################################################################################################
# # #
# # # # Job   Expected date	Finish date	FSS1 assigned	FSS2 assigned	duration	Customer	BU	Sub BU	Country Type
# # # # OD	RIG	Well	Job Status	Onshore/ Offshore	Rate	Type of Jobs############################################
# # # # </editor-fold>
# # # text, e1_df, e2_df, p1_df, p2_df = [], [], [], [], []
# # #
# # # # create tk canvas
# # # root = Tk()
# # # root.geometry('400x400')
# # # root.configure(background='black')
# # #
# # #
# # # # do analysis for first excel file
# # # def getExcel1():
# # #     global e1_df
# # #     import_file_path = filedialog.askopenfilename()
# # #     e1_df = pd.read_excel(import_file_path)
# # #     print(e1_df)
# # #     print("start path")
# # #     print(import_file_path)
# # #     print("end path")
# # #     GUI()
# # #     return e1_df
# # #
# # #
# # # # do analysis for second excel file
# # # def getExcel2():
# # #     global e2_df
# # #     import_file_path = filedialog.askopenfilename()
# # #     e2_df = pd.read_excel(import_file_path)
# # #     print(e2_df)
# # #     print("start path")
# # #     print(import_file_path)
# # #     print("end path")
# # #     GUI()
# # #     return e2_df
# # #
# # #
# # # # do analysis for first pdf file
# # # def getPDF1():
# # #     global p1_df
# # #     import_file_path = filedialog.askopenfilename()
# # #     print("start path")
# # #     print(import_file_path)
# # #     print("end path")
# # #     with open(import_file_path, 'rb') as f:
# # #         pdf = PdfFileReader(f)
# # #         page = pdf.getPage(0)
# # #         p1_df = page.extractText()
# # #     print(p1_df)
# # #     GUI()
# # #     return p1_df
# # #
# # #
# # # # do analysis for second pdf file
# # # def getPDF2():
# # #     global p2_df
# # #     import_file_path = filedialog.askopenfilename()
# # #     print("start path")
# # #     print(import_file_path)
# # #     print("end path")
# # #     with open(import_file_path, 'rb') as f:
# # #         pdf = PdfFileReader(f)
# # #         page = pdf.getPage(0)
# # #         p2_df = page.extractText()
# # #     print(p2_df)
# # #     GUI()
# # #     return p2_df
# # #
# # #
# # # # place data into df to spit out final excel
# # # def computation(e1, e2, p1, p2):
# # #     print(e1)
# # #     print(e2)
# # #     p11 = pd.read_csv(io.StringIO(p1))
# # #     p22 = pd.read_csv(io.StringIO(p2))
# # #
# # #     print(p11)
# # #     print(p22)
# # #     print(type(e1))
# # #     print(type(e2))
# # #     print(type(p11))
# # #     print(type(p22))
# # #
# # #     frames = [e1, e2, p11, p22]
# # #     result = pd.concat(frames)
# # #     result.reset_index(inplace=True, drop=True)
# # #     df = result
# # #     df.reset_index(inplace=True, drop=True)
# # #     print("4567923658903246587632489756897432658796234875687342658746328756834726587346578643758647856473657")
# # #     print(df)
# # #     print("4567923658903246587632489756897432658796234875687342658746328756834726587346578643758647856473657")
# # #
# # #     df.to_excel("Planner File Test.xlsx", index=False)
# # #
# # #
# # # # button call
# # # def create():
# # #     computation(e1_df, e2_df, p1_df, p2_df)
# # #
# # #
# # # # add buttons and create GUI
# # # def GUI():
# # #     tk.Label(root, text='Please import all necessary files to', background='black', foreground="white",
# # #              font=('Verdana', 12)).place(x=65, y=5)
# # #     tk.Label(root, text='generate a KPI', background='black', foreground="white", font=('Verdana', 12)).place(x=140,
# # #                                                                                                               y=30)
# # #     if len(e1_df) == 0:
# # #         tk.Button(root, text='Import Excel File #1', background='black', foreground="white", relief="raised",
# # #                   command=getExcel1).place(x=145, y=85)
# # #     else:
# # #         tk.Button(root, text='Import Excel File #1', background='black', foreground="green", relief="raised",
# # #                   command=getExcel1).place(x=145, y=85)
# # #     if len(e2_df) == 0:
# # #         tk.Button(root, text='Import Excel File #2', background='black', foreground="white",
# # #                   command=getExcel2).place(x=145, y=135)
# # #     else:
# # #         tk.Button(root, text='Import Excel File #2', background='black', foreground="green",
# # #                   command=getExcel2).place(x=145, y=135)
# # #     if len(p1_df) == 0:
# # #         tk.Button(root, text='Import PDF File #1', background='black', foreground="white",
# # #                   command=getPDF1).place(x=146, y=185)
# # #     else:
# # #         tk.Button(root, text='Import PDF File #1', background='black', foreground="green",
# # #                   command=getPDF1).place(x=146, y=185)
# # #     if len(p2_df) == 0:
# # #         tk.Button(root, text='Import PDF File #2', background='black', foreground="white",
# # #                   command=getPDF2).place(x=145.5, y=235)
# # #     else:
# # #         tk.Button(root, text='Import PDF File #2', background='black', foreground="green",
# # #                   command=getPDF2).place(x=145.5, y=235)
# # #
# # #     tk.Button(root, text='Generate KPI', background='black', foreground="white",
# # #               command=create).place(x=160, y=330)
# # #
# # #
# # # GUI()
# # #
# # # # run the app
# # # root.mainloop()
# # #
# # # ########################################################################################################################
# # # Test_data_df = pd.read_excel("Test.xlsx")
# # # Planner_df = pd.DataFrame()
# # #
# # # for i in range(Test_data_df["Job"].count()):
# # #     Planner_df.loc[i, "Job No"] = Test_data_df.loc[i, "Job"]
# # #     Planner_df.loc[i, "Observations"] = "='[Planner Template.xlsx]sheet 1'!$E$" + str(i + 2)
# # #     Planner_df.loc[i, "Service Class"] = "='[Planner Template.xlsx]sheet 1'!$F$" + str(i + 2)
# # #     Planner_df.loc[i, "Start Date"] = Test_data_df.loc[i, "Expected date"]
# # #     Planner_df.loc[i, "Finish Date"] = Test_data_df.loc[i, "Finish date"]
# # #     Planner_df.loc[i, "Rig"] = Test_data_df.loc[i, "RIG"]
# # #     Planner_df.loc[i, "Job Status"] = Test_data_df.loc[i, "Job Status"]
# # #     Planner_df.loc[i, "Region"] = "FISE" + "-" + Test_data_df.loc[i, "BU"] + "-" + Test_data_df.loc[i, "Sub BU"]
# # #     Planner_df.loc[i, "Country"] = Test_data_df.loc[i, "Country"]
# # #     Planner_df.loc[i, "Location"] = "='[Planner Template.xlsx]sheet 1'!$M$" + str(i + 2)
# # #     Planner_df.loc[i, "Location Type"] = Test_data_df.loc[i, "Onshore/ Offshore"]
# # #     Planner_df.loc[i, "Customer"] = "='[Planner Template.xlsx]sheet 1'!$O$" + str(i + 2)
# # #     Planner_df.loc[i, "Customer Name"] = Test_data_df.loc[i, "Customer"]
# # #     Planner_df.loc[i, "Type of invoicing"] = "='[Planner Template.xlsx]sheet 1'!$Q$" + str(i + 2)
# # #     Planner_df.loc[i, "Job Type"] = "='[Planner Template.xlsx]sheet 1'!$R$" + str(i + 2)
# # #     Planner_df.loc[i, "Fise Coordinator"] = "='[Planner Template.xlsx]sheet 1'!$S$" + str(i + 2)
# # #     Planner_df.loc[i, "Critical Claim"] = "='[Planner Template.xlsx]sheet 1'!$T$" + str(i + 2)
# # #     Planner_df.loc[i, "Intelligent Completions"] = "='[Planner Template.xlsx]sheet 1'!$U$" + str(i + 2)
# # #     Planner_df.loc[i, "Does not follow TS Guidelines"] = "='[Planner Template.xlsx]sheet 1'!$V$" + str(i + 2)
# # #     Planner_df.loc[i, "Other Technical Risks"] = "='[Planner Template.xlsx]sheet 1'!$W$" + str(i + 2)
# # #     Planner_df.loc[i, "forecasted_or_spot"] = "='[Planner Template.xlsx]sheet 1'!$X$" + str(i + 2)
# # #     Planner_df.loc[i, "Agreement"] = "='[Planner Template.xlsx]sheet 1'!$Y$" + str(i + 2)
# # #     Planner_df.loc[i, "Offer"] = "='[Planner Template.xlsx]sheet 1'!$Z$" + str(i + 2)
# # #     Planner_df.loc[i, "Operator"] = "='[Planner Template.xlsx]sheet 1'!$AA$" + str(i + 2)
# # #     Planner_df.loc[i, "PO"] = "='[Planner Template.xlsx]sheet 1'!$AB$" + str(i + 2)
# # #     Planner_df.loc[i, "Company Man"] = "='[Planner Template.xlsx]sheet 1'!$AC$" + str(i + 2)
# # #     Planner_df.loc[i, "Company Man E-Mail"] = "='[Planner Template.xlsx]sheet 1'!$AD$" + str(i + 2)
# # #     Planner_df.loc[i, "Phone No"] = "='[Planner Template.xlsx]sheet 1'!$AE$" + str(i + 2)
# # #     Planner_df.loc[i, "Directions to Rig"] = "='[Planner Template.xlsx]sheet 1'!$AF$" + str(i + 2)
# # #     Planner_df.loc[i, "Relevant Chemical Hazzard Exposure"] = "='[Planner Template.xlsx]sheet 1'!$AG$" + str(i + 2)
# # #     Planner_df.loc[i, "Customer Docs  # 1"] = "='[Planner Template.xlsx]sheet 1'!$AH$" + str(i + 2)
# # #     Planner_df.loc[i, "Customer Docs  # 2"] = "='[Planner Template.xlsx]sheet 1'!$AI$" + str(i + 2)
# # #     Planner_df.loc[i, "Bill to"] = "='[Planner Template.xlsx]sheet 1'!$AJ$" + str(i + 2)
# # #     Planner_df.loc[i, "Requester"] = "='[Planner Template.xlsx]sheet 1'!$AK$" + str(i + 2)
# # #     Planner_df.loc[i, "Ship to address"] = "='[Planner Template.xlsx]sheet 1'!$AL$" + str(i + 2)
# # #     Planner_df.loc[i, "SO"] = "='[Planner Template.xlsx]sheet 1'!$AM$" + str(i + 2)
# # #     Planner_df.loc[i, "Sold to"] = "='[Planner Template.xlsx]sheet 1'!$AN$" + str(i + 2)
# # # df = Planner_df.to_excel("Planner File.xlsx", index=False)
# # #
# # # # SUDO CODE:
# # # # 1. allow user to import excel files
# # # # 2. open files in functions
# # # # 3. analyse data and parse documents excel/PDFs
# # # # 4. group them in seperate dfs
# # # # 5. group them into one df in a function
# # # # 6. spit out data into specific format onto KPI.xlsx file
# # #
# # #
# # #
# # #
# # #  'TBA1': '#4793AA', 'TBA2': '#71AA10',
# # #
# # #  'Chowaloor Bijoy'
# # #
# # #
# # #
# # #
# # #
# # #
# # # =if()
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # # =IF(VLOOKUP($M2,Visa!$B$4:$F$25,(IF($C2="UAE",2,IF($C2="India",3,"NA")),0)>=$J2, "Valid","Invalid"))
# # #
# # #
# # #
# # #
# # # =SUMPRODUCT(($J23<$K$2:$K$46)*($K23>$J$2:$J$46)*($M23=$M$2:$M$46))>1
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# # #
# #
# #
# # # while 1:
# # #     print("Installing the file. ")
# # #     print("Successfully installed the file.")
# # #     print("Dest filename: D:\FISE MGMT App\libnumpyrandomtests\data\philox-testset-1.csv")
# # #     print(" Time stamp of our file: 2019-12-17 12:03:58.000")
# # #     print(" Compressing :/Users/HADI/Desktop/FISE MGMT Appbuild\exe.win32-3.8\FISE MGMT App.exe")
# # #     print("   Updating version info")
# # #     print("failed retrieving required info")
# # #     print("failed retrieving required info")
# # #     print("failed retrieving required info")
# # #     print("failed retrieving required info")
# # #     print("trying again")
# #     # print("Parsing [Setup] section, line 11")
# #     # print("Parsing [Setup] section, line 12")
# #     # print("Parsing [Setup] section, line 13")
# #     # print("Parsing [Setup] section, line 14")
# #     # print("Parsing [Setup] section, line 15")
# #     # print("Parsing [Setup] section, line 16")
# #     # print("Parsing [Setup] section, line 17")
# #     # print("Parsing [Setup] section, line 18")
# #     # print("Parsing [Setup] section, line 19")
# #     # print("Parsing [Setup] section, line 19")
# #     # print("Parsing [Setup] section, line 18")
# #     # print("Parsing [Setup] section, line 19")
# #     # print("Parsing [Setup] section, line 11")
# #     # print("Parsing [Setup] section, line 13")
# #     # print("Parsing [Setup] section, line 12")
# #     # print("Parsing [Setup] section, line 13")
# #
# #
# #
# #
# #
# #
# # # =IF(AND(B4="OnShore",C4=0),"Type 3",IF(AND(B4="OnShore",OR(C4=1,C4=2)),"Type 2",IF(AND(B4="OnShore",C4>2),"Type 1",IF(AND(B4="OffShore",C4=0,D4=Sheet2!H6),"Type 3",IF(AND(B4="OffShore",OR(C4=1,C4=2),D4=Sheet2!H6),"Type 2",IF(AND(B4="OffShore",C4>2,D4=Sheet2!H6),"Type 1",IF(AND(B4="OffShore",C4<2,D4=Sheet2!H7),"Type 2",IF(AND(B4="OffShore",C4>1,D4=Sheet2!H7),"Type 1","Check Values"))))))))
# #
# #
# #
# # # def zerofy(list1):
# # #     for i in range(len(list1)):
# # #         if list1[i] < 0:
# # #             list1[i] = 0
# # #     return list1
# #
# # # old code Start of feb without seperators
# # # # <editor-fold desc="Gantt Chart Data">
# # # df = pd.read_excel("Test.xlsx")
# # #
# # # # <editor-fold desc="Month Analysis">
# # # new_df = pd.DataFrame()
# # # new_df2 = pd.DataFrame()
# # # uncalculated_df = pd.DataFrame()
# # #
# # # def calcMon():
# # #
# # #     global uncalculated_df
# # #     uncalculated_df['Task'] = df["Customer"] + " " + df["RIG"] + " (" + df["OD"] + ", " + df["Connection"] + ")"
# # #     uncalculated_df['Start'] = df["Expected date"]
# # #     uncalculated_df['Finish'] = df["Finish date"]
# # #     uncalculated_df['SubBU'] = df["Sub BU"]
# # #     uncalculated_df['BU'] = df["BU"]
# # #     uncalculated_df['Description'] = df["FSS assigned"]
# # #     uncalculated_df['Countries'] = df["Country"]
# # #     uncalculated_df['Type'] = df["Type"]
# # #     uncalculated_df['status'] = df["Job Status"]
# # #     for i in range(uncalculated_df['status'].count()):
# # #         if uncalculated_df.loc[i, 'status'] == 'Done':
# # #             uncalculated_df.loc[i, 'Description'] = 'Done'
# # #     result_temp2 = uncalculated_df[uncalculated_df.Type != 'Vacation']
# # #     result_temp2.reset_index(inplace=True, drop=True)
# # #     uncalculated_df = result_temp2
# # #     uncalculated_df.reset_index(inplace=True, drop=True)
# # #     uncalculated_df = uncalculated_df.sort_values(by='Start')
# # #     uncalculated_df.reset_index(inplace=True, drop=True)
# # #
# # #     # collect data into a df
# # #     df_date = pd.DataFrame()
# # #     # collect person 1 data
# # #     df_date['Name'] = df['FSS assigned']
# # #     df_date['Start'] = df['Expected date']
# # #     df_date['Finish'] = df['Finish date']
# # #     df_date['type'] = df['Type']
# # #     df_date['SubBU'] = df['Sub BU']
# # #     df_date['Status'] = df['Job Status']
# # #
# # #     df_date["df1['Task']"] = df['FSS assigned']
# # #     df_date["df1['Start']"] = df['Expected date']
# # #     df_date["df1['Finish']"] = df['Finish date']
# # #     df_date["df1['Complete']"] = df['Job']
# # #     df_date["df1['Description']"] = df['Customer']
# # #     df_date["df1['Resource']"] = df['Type']
# # #     df_date["df1['country']"] = df['Country']
# # #     df_date["df1['SubBU']"] = df['Sub BU']
# # #     df_date["df1['BU']"] = df['BU']
# # #     df_date["df1['OD']"] = df['OD']
# # #     df_date["df1['RIG']"] = df['RIG']
# # #     df_date["df1['Connection']"] = df['Connection']
# # #
# # #     result = df_date
# # #     result = result[result.Name != 'na']
# # #     result.reset_index(inplace=True, drop=True)
# # #     df_date = result
# # #     df_date.reset_index(inplace=True, drop=True)
# # #
# # #     months_df = pd.DataFrame()
# # #     # collect data on start and finish data of each month to compare it for month assignment
# # #     months_df['Month'] = ['Jan19', 'Feb19', 'Mar19', 'Apr19', 'May19', 'Jun19', 'Jul19', 'Aug19',
# # #                           'Sep19', 'Oct19', 'Nov19', 'Dec19',
# # #                           'Jan20', 'Feb20', 'Mar20', 'Apr20', 'May20', 'Jun20', 'Jul20', 'Aug20',
# # #                           'Sep20', 'Oct20', 'Nov20', 'Dec20',
# # #                           'Jan21', 'Feb21', 'Mar21', 'Apr21', 'May21', 'Jun21', 'Jul21', 'Aug21',
# # #                           'Sep21', 'Oct21', 'Nov21', 'Dec21',
# # #                           'Jan22', 'Feb22', 'Mar22', 'Apr22', 'May22', 'Jun22', 'Jul22', 'Aug22',
# # #                           'Sep22', 'Oct22', 'Nov22', 'Dec22',
# # #                           'Jan23', 'Feb23', 'Mar23', 'Apr23', 'May23', 'Jun23', 'Jul23', 'Aug23',
# # #                           'Sep23', 'Oct23', 'Nov23', 'Dec23',
# # #                           'Jan24', 'Feb24', 'Mar24', 'Apr24', 'May24', 'Jun24', 'Jul24', 'Aug24',
# # #                           'Sep24', 'Oct24', 'Nov24', 'Dec24',
# # #                           'Jan25', 'Feb25', 'Mar25', 'Apr25', 'May25', 'Jun25', 'Jul25', 'Aug25',
# # #                           'Sep25', 'Oct25', 'Nov25', 'Dec25',
# # #                           'Jan26', 'Feb26', 'Mar26', 'Apr26', 'May26', 'Jun26', 'Jul26', 'Aug26',
# # #                           'Sep26', 'Oct26', 'Nov26', 'Dec26',
# # #                           'Jan27', 'Feb27', 'Mar27', 'Apr27', 'May27', 'Jun27', 'Jul27', 'Aug27',
# # #                           'Sep27', 'Oct27', 'Nov27', 'Dec27',
# # #                           'Jan28', 'Feb28', 'Mar28', 'Apr28', 'May28', 'Jun28', 'Jul28', 'Aug28',
# # #                           'Sep28', 'Oct28', 'Nov28', 'Dec28',
# # #                           ]
# # #     months_df['M_Start'] = ['1/1/2019', '2/1/2019', '3/1/2019', '4/1/2019', '5/1/2019', '6/1/2019', '7/1/2019',
# # #                             '8/1/2019', '9/1/2019', '10/1/2019', '11/1/2019', '12/1/2019',
# # #                             '1/1/2020', '2/1/2020', '3/1/2020', '4/1/2020', '5/1/2020', '6/1/2020', '7/1/2020',
# # #                             '8/1/2020', '9/1/2020', '10/1/2020', '11/1/2020', '12/1/2020',
# # #                             '1/1/2021', '2/1/2021', '3/1/2021', '4/1/2021', '5/1/2021', '6/1/2021', '7/1/2021',
# # #                             '8/1/2021', '9/1/2021', '10/1/2021', '11/1/2021', '12/1/2021',
# # #                             '1/1/2022', '2/1/2022', '3/1/2022', '4/1/2022', '5/1/2022', '6/1/2022', '7/1/2022',
# # #                             '8/1/2022', '9/1/2022', '10/1/2022', '11/1/2022', '12/1/2022',
# # #                             '1/1/2023', '2/1/2023', '3/1/2023', '4/1/2023', '5/1/2023', '6/1/2023', '7/1/2023',
# # #                             '8/1/2023', '9/1/2023', '10/1/2023', '11/1/2023', '12/1/2023',
# # #                             '1/1/2024', '2/1/2024', '3/1/2024', '4/1/2024', '5/1/2024', '6/1/2024', '7/1/2024',
# # #                             '8/1/2024', '9/1/2024', '10/1/2024', '11/1/2024', '12/1/2024',
# # #                             '1/1/2025', '2/1/2025', '3/1/2025', '4/1/2025', '5/1/2025', '6/1/2025', '7/1/2025',
# # #                             '8/1/2025', '9/1/2025', '10/1/2025', '11/1/2025', '12/1/2025',
# # #                             '1/1/2026', '2/1/2026', '3/1/2026', '4/1/2026', '5/1/2026', '6/1/2026', '7/1/2026',
# # #                             '8/1/2026', '9/1/2026', '10/1/2026', '11/1/2026', '12/1/2026',
# # #                             '1/1/2027', '2/1/2027', '3/1/2027', '4/1/2027', '5/1/2027', '6/1/2027', '7/1/2027',
# # #                             '8/1/2027', '9/1/2027', '10/1/2027', '11/1/2027', '12/1/2027',
# # #                             '1/1/2028', '2/1/2028', '3/1/2028', '4/1/2028', '5/1/2028', '6/1/2028', '7/1/2028',
# # #                             '8/1/2028', '9/1/2028', '10/1/2028', '11/1/2028', '12/1/2028']
# # #     months_df['M_Finish'] = ['1/31/2019', '2/28/2019', '3/31/2019', '4/30/2019', '5/31/2019', '6/30/2019',
# # #                              '7/31/2019',
# # #                              '8/31/2019', '9/30/2019', '10/31/2019', '11/30/2019', '12/31/2019',
# # #                              '1/31/2020', '2/28/2020', '3/31/2020', '4/30/2020', '5/31/2020', '6/30/2020',
# # #                              '7/31/2020',
# # #                              '8/31/2020', '9/30/2020', '10/31/2020', '11/30/2020', '12/31/2020',
# # #                              '1/31/2021', '2/28/2021', '3/31/2021', '4/30/2021', '5/31/2021', '6/30/2021',
# # #                              '7/31/2021',
# # #                              '8/31/2021', '9/30/2021', '10/31/2021', '11/30/2021', '12/31/2021',
# # #                              '1/31/2022', '2/28/2022', '3/31/2022', '4/30/2022', '5/31/2022', '6/30/2022',
# # #                              '7/31/2022',
# # #                              '8/31/2022', '9/30/2022', '10/31/2022', '11/30/2022', '12/31/2022',
# # #                              '1/31/2023', '2/28/2023', '3/31/2023', '4/30/2023', '5/31/2023', '6/30/2023',
# # #                              '7/31/2023',
# # #                              '8/31/2023', '9/30/2023', '10/31/2023', '11/30/2023', '12/31/2023',
# # #                              '1/31/2024', '2/28/2024', '3/31/2024', '4/30/2024', '5/31/2024', '6/30/2024',
# # #                              '7/31/2024',
# # #                              '8/31/2024', '9/30/2024', '10/31/2024', '11/30/2024', '12/31/2024',
# # #                              '1/31/2025', '2/28/2025', '3/31/2025', '4/30/2025', '5/31/2025', '6/30/2025',
# # #                              '7/31/2025',
# # #                              '8/31/2025', '9/30/2025', '10/31/2025', '11/30/2025', '12/31/2025',
# # #                              '1/31/2026', '2/28/2026', '3/31/2026', '4/30/2026', '5/31/2026', '6/30/2026',
# # #                              '7/31/2026',
# # #                              '8/31/2026', '9/30/2026', '10/31/2026', '11/30/2026', '12/31/2026',
# # #                              '1/31/2027', '2/28/2027', '3/31/2027', '4/30/2027', '5/31/2027', '6/30/2027',
# # #                              '7/31/2027',
# # #                              '8/31/2027', '9/30/2027', '10/31/2027', '11/30/2027', '12/31/2027',
# # #                              '1/31/2028', '2/28/2028', '3/31/2028', '4/30/2028', '5/31/2028', '6/30/2028',
# # #                              '7/31/2028',
# # #                              '8/31/2028', '9/30/2028', '10/31/2028', '11/30/2028', '12/31/2028']
# # #     months_df['M_Start'] = months_df['M_Start'].astype('datetime64[ns]')
# # #     months_df['M_Finish'] = months_df['M_Finish'].astype('datetime64[ns]')
# # #
# # #     global new_df
# # #     global new_df2
# # #     # for loop to assign each row a specific month based on its date start and finish
# # #     for j in range(df_date['Name'].count()):
# # #         for i in range(months_df['Month'].count()):
# # #             # check if the date start is greater than a certain month and smaller than that same month
# # #             if df_date.loc[j, 'Start'] >= months_df.loc[i, 'M_Start'] and df_date.loc[j, 'Finish'] <= \
# # #                     months_df.loc[
# # #                         i, 'M_Finish']:
# # #                 new_df.loc[j, 'name'] = df_date.loc[j, 'Name']
# # #                 new_df.loc[j, 'month'] = months_df.loc[i, 'Month']
# # #                 new_df.loc[j, 'duration1'] = df_date.loc[j, 'Finish'] - df_date.loc[j, 'Start']
# # #                 new_df.loc[j, 'duration2'] = 0
# # #                 new_df.loc[j, 'start'] = df_date.loc[j, 'Start']
# # #                 new_df.loc[j, 'finish'] = df_date.loc[j, 'Finish']
# # #                 new_df.loc[j, 'Type'] = df_date.loc[j, 'type']
# # #                 new_df.loc[j, 'SubBU'] = df_date.loc[j, 'SubBU']
# # #                 new_df.loc[j, "df1['Task']"] = df_date.loc[j, "df1['Task']"]
# # #                 new_df.loc[j, "df1['Start']"] = df_date.loc[j, "df1['Start']"]
# # #                 new_df.loc[j, "df1['Finish']"] = df_date.loc[j, "df1['Finish']"]
# # #                 new_df.loc[j, "df1['Complete']"] = df_date.loc[j, "df1['Complete']"]
# # #                 new_df.loc[j, "df1['Description']"] = df_date.loc[j, "df1['Description']"]
# # #                 new_df.loc[j, "df1['Resource']"] = df_date.loc[j, "df1['Resource']"]
# # #                 new_df.loc[j, "df1['country']"] = df_date.loc[j, "df1['country']"]
# # #                 new_df.loc[j, "df1['SubBU']"] = df_date.loc[j, "df1['SubBU']"]
# # #                 new_df.loc[j, "df1['BU']"] = df_date.loc[j, "df1['BU']"]
# # #                 new_df.loc[j, "df1['OD']"] = df_date.loc[j, "df1['OD']"]
# # #                 new_df.loc[j, "df1['RIG']"] = df_date.loc[j, "df1['RIG']"]
# # #                 new_df.loc[j, "df1['Connection']"] = df_date.loc[j, "df1['Connection']"]
# # #                 new_df.loc[j, "status"] = df_date.loc[j, "Status"]
# # #
# # #
# # #             # check if the date start is greater than a certain month and ends the next month
# # #             elif df_date.loc[j, 'Start'] >= months_df.loc[i, 'M_Start'] and df_date.loc[j, 'Finish'] <= \
# # #                     months_df.loc[
# # #                         i + 1, 'M_Finish']:
# # #                 new_df.loc[j, 'name'] = df_date.loc[j, 'Name']
# # #                 new_df.loc[j, 'month'] = months_df.loc[i, 'Month'] + "/" + months_df.loc[i + 1, 'Month']
# # #                 new_df.loc[j, 'duration1'] = months_df.loc[i, 'M_Finish'] - df_date.loc[j, 'Start']
# # #                 new_df.loc[j, 'Type'] = df_date.loc[j, 'type']
# # #                 if months_df.loc[i, 'M_Finish'] == df_date.loc[j, 'Start']:
# # #                     new_df.loc[j, 'duration1'] = new_df.loc[j, 'duration1']
# # #                 new_df.loc[j, 'duration2'] = df_date.loc[j, 'Finish'] - months_df.loc[i + 1, 'M_Start']
# # #                 if df_date.loc[j, 'Finish'] == months_df.loc[i + 1, 'M_Start']:
# # #                     new_df.loc[j, 'duration2'] = new_df.loc[j, 'duration2']
# # #                 new_df.loc[j, 'start'] = df_date.loc[j, 'Start']
# # #                 new_df.loc[j, 'finish'] = df_date.loc[j, 'Finish']
# # #                 new_df.loc[j, 'SubBU'] = df_date.loc[j, 'SubBU']
# # #                 new_df.loc[j, "df1['Task']"] = df_date.loc[j, "df1['Task']"]
# # #                 new_df.loc[j, "df1['Start']"] = df_date.loc[j, "df1['Start']"]
# # #                 new_df.loc[j, "df1['Finish']"] = df_date.loc[j, "df1['Finish']"]
# # #                 new_df.loc[j, "df1['Complete']"] = df_date.loc[j, "df1['Complete']"]
# # #                 new_df.loc[j, "df1['Description']"] = df_date.loc[j, "df1['Description']"]
# # #                 new_df.loc[j, "df1['Resource']"] = df_date.loc[j, "df1['Resource']"]
# # #                 new_df.loc[j, "df1['country']"] = df_date.loc[j, "df1['country']"]
# # #                 new_df.loc[j, "df1['SubBU']"] = df_date.loc[j, "df1['SubBU']"]
# # #                 new_df.loc[j, "df1['BU']"] = df_date.loc[j, "df1['BU']"]
# # #                 new_df.loc[j, "df1['OD']"] = df_date.loc[j, "df1['OD']"]
# # #                 new_df.loc[j, "df1['RIG']"] = df_date.loc[j, "df1['RIG']"]
# # #                 new_df.loc[j, "df1['Connection']"] = df_date.loc[j, "df1['Connection']"]
# # #                 new_df.loc[j, "status"] = df_date.loc[j, "Status"]
# # #
# # #     new_df2 = new_df[new_df.duration2 != 0]
# # #     new_df.reset_index(inplace=True, drop=True)
# # #     new_df2.reset_index(inplace=True, drop=True)
# # #     new_df2['duration1'] = new_df2['duration2']
# # #     del new_df['duration2']
# # #     del new_df2['duration2']
# # #
# # #     # check if the months that have feb/march for ex. have the right start and end date
# # #     for j in range(new_df['name'].count()):
# # #         for i in range(months_df['Month'].count()):
# # #             if new_df.loc[j, 'start'] >= months_df.loc[i, 'M_Start'] and new_df.loc[j, 'finish'] <= \
# # #                     months_df.loc[
# # #                         i + 1, 'M_Finish'] and len(new_df.loc[j, 'month']) > 6:
# # #                 if new_df.loc[j, 'start'] == new_df.loc[j, 'start']:
# # #                     new_df.loc[j, 'finish'] = months_df.loc[i + 1, 'M_Start']
# # #                 else:
# # #                     new_df.loc[j, 'finish'] = months_df.loc[i, 'M_Finish']
# # #
# # #     for j in range(new_df2['name'].count()):
# # #         for i in range(months_df['Month'].count()):
# # #             if new_df2.loc[j, 'start'] >= months_df.loc[i, 'M_Start'] and new_df2.loc[j, 'finish'] <= \
# # #                     months_df.loc[
# # #                         i + 1, 'M_Finish'] and len(new_df2.loc[j, 'month']) > 6:
# # #                 new_df2.loc[j, 'actual_start'] = months_df.loc[i + 1, 'M_Start']
# # #
# # #     # check if the months that have feb/march for ex. are feb or march
# # #     new_df2['start'] = new_df2['actual_start']
# # #     del new_df2['actual_start']
# # #
# # #     for k in range(new_df['name'].count()):
# # #         if len(new_df.loc[k, 'month']) > 4:
# # #             new_df.loc[k, 'month'] = new_df.loc[k, 'month'][:5]
# # #
# # #     for k in range(new_df2['name'].count()):
# # #         new_df2.loc[k, 'month'] = new_df2.loc[k, 'month'][-5:]
# # #
# # #     # merge the last 2 final dataframes with the final months names and take actual month name if split
# # #     frames5 = [new_df2, new_df]
# # #     result = pd.concat(frames5)
# # #     result.reset_index(inplace=True, drop=True)
# # #     df1 = result
# # #     df1.reset_index(inplace=True, drop=True)
# # #     for p in range(df1['name'].count()):
# # #         if len(df1.loc[p, 'month']) > 4:
# # #             df1.loc[p, 'month'] = df1.loc[p, 'month'][-5:]
# # #     new_df = df1
# # #     for i in range(new_df['duration1'].count()):
# # #         new_df.loc[i, 'duration1'] = new_df.loc[i, 'duration1'] + timedelta(days=1)
# # #         new_df.loc[i, 'duration'] = new_df.loc[i, 'duration1'].days
# # #         new_df.loc[i, 'utilization'] = new_df.loc[i, 'duration1'].days / 16 * 100
# # #
# # # calcMon()
# # #
# # # # <editor-fold desc="By people data collection">
# # # df1 = pd.DataFrame()
# # # df1['Task'] = new_df["df1['Task']"]
# # # df1['Start'] = new_df["start"]
# # # df1['Finish'] = new_df["finish"]
# # # df1['Complete'] = new_df["df1['Complete']"]
# # # df1['Description'] = new_df["df1['Description']"] + " || " + new_df["df1['RIG']"]
# # # df1['Resource'] = new_df["df1['Resource']"]
# # # df1['country'] = new_df["df1['country']"]
# # # df1['SubBU'] = new_df["df1['SubBU']"]
# # # df1['BU'] = new_df["df1['BU']"]
# # # df1['OD'] = new_df["df1['OD']"]
# # # df1['RIG'] = new_df["df1['RIG']"]
# # # df1['Connection'] = new_df["df1['Connection']"]
# # # df1['month'] = new_df['month']
# # # df1['Type'] = new_df['Type']
# # # df1['status'] = new_df['status']
# # #
# # # result41 = df1[df1['Task'].str[:3] != 'TBA']
# # # result41.reset_index(inplace=True, drop=True)
# # # df1 = result41
# # # df1.reset_index(inplace=True, drop=True)
# # # df1 = df1.sort_values(by='Start')
# # # df1.reset_index(inplace=True, drop=True)
# # #
# # # # </editor-fold>
# # #
# # # # <editor-fold desc="Gantt Chart Data Analysis Data Collection">
# # # gantt_chart_analysis = pd.DataFrame()
# # #
# # # gantt_chart_analysis['Task'] = new_df['name']
# # # gantt_chart_analysis['Start'] = new_df['start']
# # # gantt_chart_analysis['Finish'] = new_df['finish']
# # # gantt_chart_analysis['Complete'] = new_df['month']
# # # gantt_chart_analysis['Resource'] = new_df['Type']
# # # gantt_chart_analysis['SubBU'] = new_df['SubBU']
# # # gantt_chart_analysis['Type'] = new_df["df1['Resource']"]
# # # gantt_chart_analysis['Duration'] = new_df['duration']
# # # gantt_chart_analysis['Utilization'] = new_df['utilization']
# # # for i in range(new_df['duration'].count()):
# # #     gantt_chart_analysis.loc[i, 'describe_m'] = ' D: ' + str(new_df.loc[i, 'duration'])[:-2] \
# # #                                                 + ' (' + str(new_df.loc[i, 'utilization']) + '%)'
# # #
# # # gantt_chart_analysis['Start'] = pd.to_datetime(gantt_chart_analysis.Start)
# # # gantt_chart_analysis = gantt_chart_analysis.sort_values(by='Start')
# # # options = gantt_chart_analysis['Complete'].unique()
# # #
# # # result3 = gantt_chart_analysis[gantt_chart_analysis['Task'].str[:3] != 'TBA']
# # # result3.reset_index(inplace=True, drop=True)
# # # gantt_chart_analysis = result3
# # # gantt_chart_analysis.reset_index(inplace=True, drop=True)
# # #
# # # result3 = gantt_chart_analysis[gantt_chart_analysis.Type != 'Vacation']
# # # result3.reset_index(inplace=True, drop=True)
# # # gantt_chart_analysis = result3
# # # gantt_chart_analysis.reset_index(inplace=True, drop=True)
# # # gantt_chart_analysis = gantt_chart_analysis.sort_values(by='Start')
# # #
# # # options = np.insert(options, 0, 'ALL')
# # # gantt_chart_analysis_temp = pd.DataFrame()
# # # # </editor-fold>
# # #
# # # # </editor-fold>
# # #
# # # # <editor-fold desc="By jobs data collection">
# # #
# # # # get country and customer data
# # # df3 = pd.DataFrame()
# # # df3['Task'] = new_df["df1['Description']"] + " " + new_df["df1['RIG']"] + " (" + new_df["df1['OD']"] + ", " + \
# # #               new_df["df1['Connection']"] + ")"
# # # df3['Start'] = new_df["start"]
# # # df3['Finish'] = new_df["finish"]
# # # df3['SubBU'] = new_df["df1['SubBU']"]
# # # df3['BU'] = new_df["df1['BU']"]
# # # df3['Countries'] = new_df["df1['country']"]
# # # df3['Month'] = new_df['month']
# # # df3['Type'] = new_df["df1['Resource']"]
# # # df3['status'] = new_df['status']
# # # df3['Description'] = new_df["df1['Task']"]
# # #
# # # for i in range(len(df3['Description'])):
# # #     if df3.loc[i, 'Description'][:3] == 'TBA':
# # #         df3.loc[i, 'Countries'] = new_df.loc[i, "df1['country']"] + ' TBA'
# # #
# # # names = pd.DataFrame()
# # # names['names'] = df3['Description'].unique()
# # #
# # # result_temp1 = df3[df3.Type != 'Vacation']
# # # result_temp1.reset_index(inplace=True, drop=True)
# # # df3 = result_temp1
# # # df3.reset_index(inplace=True, drop=True)
# # # df3 = df3.sort_values(by='Start')
# # # df3.reset_index(inplace=True, drop=True)
# # #
# # # names_append = pd.DataFrame()
# # # names_append.loc[0, 'names'] = "--------------------------------------------------"
# # # names_append.loc[1, 'names'] = "-------------------------------------------------"
# # #
# # # names = names.append(names_append)
# # # names.reset_index(inplace=True, drop=True)
# # #
# # # colorDict = {}
# # # names_index = len(names)
# # # for i in names['names']:
# # #     if i == 'TBA' or i == 'tba':
# # #         colorDict[i] = '#119DFF'
# # #         names_index = names_index - 1
# # #     elif i == 'Done':
# # #         colorDict[i] = '#00FF00'
# # #         names_index = names_index - 1
# # #     elif i == '--------------------------------------------------' or \
# # #             i == '-------------------------------------------------':
# # #         colorDict[i] = '#FEFEFE'
# # #         names_index = names_index - 1
# # #     else:
# # #         import random
# # #         if names_index % 2 == 0:
# # #             r1 = random.randint(0, 9)
# # #             r2 = random.randint(0, 9)
# # #             r3 = random.randint(0, 9)
# # #             r4 = random.randint(0, 9)
# # #             colorDict[i] = '#' + str(r1) + str(r2) + str(r3) + str(r4) + 'AA'
# # #             names_index = names_index - 1
# # #         else:
# # #             r1 = random.randint(0, 9)
# # #             r2 = random.randint(0, 9)
# # #             r3 = random.randint(0, 9)
# # #             r4 = random.randint(0, 9)
# # #             colorDict[i] = '#' + str(r1) + str(r2) + 'AA' + str(r3) + str(r4)
# # #             names_index = names_index - 1
# # # colorDict['Done'] = '#00FF00'
# # #
# # # for i in range(df3['status'].count()):
# # #     if df3.loc[i, 'status'] == 'Done':
# # #         df3.loc[i, 'Description'] = 'Done'
# # #
# # # df3Dict = df3.to_dict()
# # # optionsBU = df3['BU'].unique()
# # # optionsSBU = df3['SubBU'].unique()
# # # all_options = {
# # #     'DIMI': ['GCC', 'OMENA'], 'DINS': [u'SSA', 'NS'], 'DAPA': ['OSEA', 'IND'], 'DERC': ['CE', 'CAS']}
# # #
# # # options2 = pd.DataFrame()
# # # options2 = np.append(options2, 'ALL')
# # # dfc = pd.DataFrame()
# # # dfj = pd.DataFrame()
# # # dfp = pd.DataFrame()
# # # dfw = pd.DataFrame()
# # # dfm = pd.DataFrame()
# # #
# # # # </editor-fold>
# # #
# # # # <editor-fold desc="By jobs + People data">
# # # df3_JnP = df3
# # # df1_JnP = pd.DataFrame()
# # # df1_JnP["Task"] = df1["Task"]
# # # df1_JnP["Start"] = df1["Start"]
# # # df1_JnP["Finish"] = df1["Finish"]
# # # df1_JnP["SubBU"] = df1["SubBU"]
# # # df1_JnP["BU"] = df1["BU"]
# # # df1_JnP["Description"] = df1["Task"]
# # # df1_JnP["Countries"] = df1["country"]
# # # df1_JnP["Month"] = df1["month"]
# # # df1_JnP["Type"] = df1["Type"]
# # #
# # # unique_months = df1["month"].unique()
# # # np.insert(unique_months, -1, "ALL")
# # # seperate_JnP = pd.DataFrame()
# # # seperate_JnP1 = pd.DataFrame()
# # # seperate_JnP2 = pd.DataFrame()
# # # seperate_JnP3 = pd.DataFrame()
# # # seperate_JnP4 = pd.DataFrame()
# # # seperate_JnP5 = pd.DataFrame()
# # # seperate_JnP6 = pd.DataFrame()
# # # seperate_JnP7 = pd.DataFrame()
# # # date_sorter_df = pd.DataFrame()
# # # date_sorter_df['Finish'] = df1['Finish']
# # # date_sorter_df = date_sorter_df.sort_values(by='Finish', ascending=False)
# # # date_sorter_df.reset_index(inplace=True, drop=True)
# # #
# # # for i in range(len(unique_months)):
# # #     seperate_JnP.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP.loc[i, "SubBU"] = "GCC"
# # #     seperate_JnP.loc[i, "BU"] = "DIMI"
# # #     seperate_JnP.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP1.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP1.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP1.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP1.loc[i, "SubBU"] = "OMENA"
# # #     seperate_JnP1.loc[i, "BU"] = "DIMI"
# # #     seperate_JnP1.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP1.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP1.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP1.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP2.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP2.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP2.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP2.loc[i, "SubBU"] = "SSA"
# # #     seperate_JnP2.loc[i, "BU"] = "DINS"
# # #     seperate_JnP2.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP2.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP2.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP2.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP3.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP3.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP3.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP3.loc[i, "SubBU"] = "NS"
# # #     seperate_JnP3.loc[i, "BU"] = "DINS"
# # #     seperate_JnP3.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP3.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP3.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP3.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP4.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP4.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP4.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP4.loc[i, "SubBU"] = "OSEA"
# # #     seperate_JnP4.loc[i, "BU"] = "DAPA"
# # #     seperate_JnP4.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP4.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP4.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP4.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP5.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP5.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP5.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP5.loc[i, "SubBU"] = "IND"
# # #     seperate_JnP5.loc[i, "BU"] = "DAPA"
# # #     seperate_JnP5.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP5.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP5.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP5.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP6.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP6.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP6.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP6.loc[i, "SubBU"] = "CE"
# # #     seperate_JnP6.loc[i, "BU"] = "DERC"
# # #     seperate_JnP6.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP6.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP6.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP6.loc[i, "Type"] = "Active"
# # #
# # #     seperate_JnP7.loc[i, "Task"] = "--------------------------------------------------"
# # #     seperate_JnP7.loc[i, "Start"] = df1.loc[0, "Start"]
# # #     seperate_JnP7.loc[i, "Finish"] = date_sorter_df.loc[0, "Finish"]
# # #     seperate_JnP7.loc[i, "SubBU"] = "CAS"
# # #     seperate_JnP7.loc[i, "BU"] = "DERC"
# # #     seperate_JnP7.loc[i, "Description"] = "--------------------------------------------------"
# # #     seperate_JnP7.loc[i, "Countries"] = "UAE"
# # #     seperate_JnP7.loc[i, "Month"] = unique_months[i]
# # #     seperate_JnP7.loc[i, "Type"] = "Active"
# # #
# # # seperate_JnP["Start"] = seperate_JnP["Start"].astype('datetime64[ns]')
# # # seperate_JnP["Finish"] = seperate_JnP["Finish"].astype('datetime64[ns]')
# # # seperate_JnP1["Start"] = seperate_JnP1["Start"].astype('datetime64[ns]')
# # # seperate_JnP1["Finish"] = seperate_JnP1["Finish"].astype('datetime64[ns]')
# # # seperate_JnP2["Start"] = seperate_JnP2["Start"].astype('datetime64[ns]')
# # # seperate_JnP2["Finish"] = seperate_JnP2["Finish"].astype('datetime64[ns]')
# # # seperate_JnP3["Start"] = seperate_JnP3["Start"].astype('datetime64[ns]')
# # # seperate_JnP3["Finish"] = seperate_JnP3["Finish"].astype('datetime64[ns]')
# # # seperate_JnP4["Start"] = seperate_JnP4["Start"].astype('datetime64[ns]')
# # # seperate_JnP4["Finish"] = seperate_JnP4["Finish"].astype('datetime64[ns]')
# # # seperate_JnP5["Start"] = seperate_JnP5["Start"].astype('datetime64[ns]')
# # # seperate_JnP5["Finish"] = seperate_JnP5["Finish"].astype('datetime64[ns]')
# # # seperate_JnP6["Start"] = seperate_JnP6["Start"].astype('datetime64[ns]')
# # # seperate_JnP6["Finish"] = seperate_JnP6["Finish"].astype('datetime64[ns]')
# # # seperate_JnP7["Start"] = seperate_JnP7["Start"].astype('datetime64[ns]')
# # # seperate_JnP7["Finish"] = seperate_JnP7["Finish"].astype('datetime64[ns]')
# # #
# # # df3_JnP = df3_JnP.append(seperate_JnP)
# # # df3_JnP = df3_JnP.append(seperate_JnP1)
# # # df3_JnP = df3_JnP.append(seperate_JnP2)
# # # df3_JnP = df3_JnP.append(seperate_JnP3)
# # # df3_JnP = df3_JnP.append(seperate_JnP4)
# # # df3_JnP = df3_JnP.append(seperate_JnP5)
# # # df3_JnP = df3_JnP.append(seperate_JnP6)
# # # df3_JnP = df3_JnP.append(seperate_JnP7)
# # #
# # # frames_JnP = [df3_JnP, df1_JnP]
# # # result_JnP = pd.concat(frames_JnP, sort=True)
# # # result_JnP.reset_index(inplace=True, drop=True)
# # # df_JnP = result_JnP
# # # df_JnP.reset_index(inplace=True, drop=True)
# # # # </editor-fold>
# # #
# # # # </editor-fold>
# # # # <editor-fold desc="Map Data">
# # # map_df = pd.DataFrame()
# # # map_df['names'] = df['FSS assigned']
# # # map_df['country'] = df['Country']
# # # map_df['SubBU'] = df['Sub BU']
# # # map_df['Type'] = df['Type']
# # # for i in range(df['Job'].count()):
# # #     map_df.loc[i, 'jobs'] = str(df.loc[i, 'Job']) + str(df.loc[i, 'Well']) + str(df.loc[i, 'RIG']) + \
# # #                             str(df.loc[i, 'OD']) + str(df.loc[i, 'Connection'])
# # #
# # # result2 = map_df
# # # result2 = result2[result2.Type != 'Vacation']
# # # result2.reset_index(inplace=True, drop=True)
# # # map_df = result2
# # # map_df.reset_index(inplace=True, drop=True)
# # #
# # # # country assignment
# # # conditions1 = [
# # #
# # #     (map_df['country'] == 'UAE'),
# # #     (map_df['country'] == 'Afghanistan'),
# # #     (map_df['country'] == 'Albania'),
# # #     (map_df['country'] == 'Algeria'),
# # #     (map_df['country'] == 'Andorra'),
# # #     (map_df['country'] == 'Angola'),
# # #     (map_df['country'] == 'Antigua and Barbuda'),
# # #     (map_df['country'] == 'Argentina'),
# # #     (map_df['country'] == 'Armenia'),
# # #     (map_df['country'] == 'Australia'),
# # #     (map_df['country'] == 'Austria'),
# # #     (map_df['country'] == 'Azerbaijan'),
# # #     (map_df['country'] == 'Bahamas'),
# # #     (map_df['country'] == 'Bahrain'),
# # #     (map_df['country'] == 'Bangladesh'),
# # #     (map_df['country'] == 'Barbados'),
# # #     (map_df['country'] == 'Belarus'),
# # #     (map_df['country'] == 'Belgium'),
# # #     (map_df['country'] == 'Belize'),
# # #     (map_df['country'] == 'Benin'),
# # #     (map_df['country'] == 'Bhutan'),
# # #     (map_df['country'] == 'Bolivia'),
# # #     (map_df['country'] == 'Bosnia and Herzegovina'),
# # #     (map_df['country'] == 'Botswana'),
# # #     (map_df['country'] == 'Brazil'),
# # #     (map_df['country'] == 'Brunei'),
# # #     (map_df['country'] == 'Bulgaria'),
# # #     (map_df['country'] == 'Burkina Faso'),
# # #     (map_df['country'] == 'Burundi'),
# # #     (map_df['country'] == 'Cabo Verde'),
# # #     (map_df['country'] == 'Cambodia'),
# # #     (map_df['country'] == 'Cameroon'),
# # #     (map_df['country'] == 'Canada'),
# # #     (map_df['country'] == 'Central African Republic (CAR)'),
# # #     (map_df['country'] == 'Chad'),
# # #     (map_df['country'] == 'Chile'),
# # #     (map_df['country'] == 'China'),
# # #     (map_df['country'] == 'Colombia'),
# # #     (map_df['country'] == 'Comoros'),
# # #     (map_df['country'] == 'Congo (Congo-Brazzaville)'),
# # #     (map_df['country'] == 'Costa Rica'),
# # #     (map_df['country'] == 'Cote d’Ivoire'),
# # #     (map_df['country'] == 'Croatia'),
# # #     (map_df['country'] == 'Cuba'),
# # #     (map_df['country'] == 'Cyprus'),
# # #     (map_df['country'] == 'Czechia'),
# # #     (map_df['country'] == 'Democratic Republic of the Congo'),
# # #     (map_df['country'] == 'Denmark'),
# # #     (map_df['country'] == 'Djibouti'),
# # #     (map_df['country'] == 'Dominica'),
# # #     (map_df['country'] == 'Dominican Republic'),
# # #     (map_df['country'] == 'Ecuador'),
# # #     (map_df['country'] == 'Egypt'),
# # #     (map_df['country'] == 'El Salvador'),
# # #     (map_df['country'] == 'Equatorial Guinea'),
# # #     (map_df['country'] == 'Eritrea'),
# # #     (map_df['country'] == 'Estonia'),
# # #     (map_df['country'] == 'Eswatini'),
# # #     (map_df['country'] == 'Ethiopia'),
# # #     (map_df['country'] == 'Fiji'),
# # #     (map_df['country'] == 'Finland'),
# # #     (map_df['country'] == 'France'),
# # #     (map_df['country'] == 'Gabon'),
# # #     (map_df['country'] == 'Gambia'),
# # #     (map_df['country'] == 'Georgia'),
# # #     (map_df['country'] == 'Germany'),
# # #     (map_df['country'] == 'Ghana'),
# # #     (map_df['country'] == 'Greece'),
# # #     (map_df['country'] == 'Grenada'),
# # #     (map_df['country'] == 'Guatemala'),
# # #     (map_df['country'] == 'Guinea'),
# # #     (map_df['country'] == 'Guinea-Bissau'),
# # #     (map_df['country'] == 'Guyana'),
# # #     (map_df['country'] == 'Haiti'),
# # #     (map_df['country'] == 'Honduras'),
# # #     (map_df['country'] == 'Hungary'),
# # #     (map_df['country'] == 'Iceland'),
# # #     (map_df['country'] == 'India'),
# # #     (map_df['country'] == 'Indonesia'),
# # #     (map_df['country'] == 'Iran'),
# # #     (map_df['country'] == 'Iraq'),
# # #     (map_df['country'] == 'Ireland'),
# # #     (map_df['country'] == 'Israel'),
# # #     (map_df['country'] == 'Italy'),
# # #     (map_df['country'] == 'Jamaica'),
# # #     (map_df['country'] == 'Japan'),
# # #     (map_df['country'] == 'Jordan'),
# # #     (map_df['country'] == 'Kazakhstan'),
# # #     (map_df['country'] == 'Kenya'),
# # #     (map_df['country'] == 'Kiribati'),
# # #     (map_df['country'] == 'Kosovo'),
# # #     (map_df['country'] == 'Kuwait'),
# # #     (map_df['country'] == 'Kyrgyzstan'),
# # #     (map_df['country'] == 'Laos'),
# # #     (map_df['country'] == 'Latvia'),
# # #     (map_df['country'] == 'Lebanon'),
# # #     (map_df['country'] == 'Lesotho'),
# # #     (map_df['country'] == 'Liberia'),
# # #     (map_df['country'] == 'Libya'),
# # #     (map_df['country'] == 'Liechtenstein'),
# # #     (map_df['country'] == 'Lithuania'),
# # #     (map_df['country'] == 'Luxembourg'),
# # #     (map_df['country'] == 'Madagascar'),
# # #     (map_df['country'] == 'Malawi'),
# # #     (map_df['country'] == 'Malaysia'),
# # #     (map_df['country'] == 'Maldives'),
# # #     (map_df['country'] == 'Mali'),
# # #     (map_df['country'] == 'Malta'),
# # #     (map_df['country'] == 'Marshall Islands'),
# # #     (map_df['country'] == 'Mauritania'),
# # #     (map_df['country'] == 'Mauritius'),
# # #     (map_df['country'] == 'Mexico'),
# # #     (map_df['country'] == 'Micronesia'),
# # #     (map_df['country'] == 'Moldova'),
# # #     (map_df['country'] == 'Monaco'),
# # #     (map_df['country'] == 'Mongolia'),
# # #     (map_df['country'] == 'Montenegro'),
# # #     (map_df['country'] == 'Morocco'),
# # #     (map_df['country'] == 'Mozambique'),
# # #     (map_df['country'] == 'Myanmar'),
# # #     (map_df['country'] == 'Namibia'),
# # #     (map_df['country'] == 'Nauru'),
# # #     (map_df['country'] == 'Nepal'),
# # #     (map_df['country'] == 'Netherlands'),
# # #     (map_df['country'] == 'New Zealand'),
# # #     (map_df['country'] == 'Nicaragua'),
# # #     (map_df['country'] == 'Niger'),
# # #     (map_df['country'] == 'Nigeria'),
# # #     (map_df['country'] == 'North Korea'),
# # #     (map_df['country'] == 'North Macedonia'),
# # #     (map_df['country'] == 'Norway'),
# # #     (map_df['country'] == 'Oman'),
# # #     (map_df['country'] == 'Pakistan'),
# # #     (map_df['country'] == 'Palau'),
# # #     (map_df['country'] == 'Palestine'),
# # #     (map_df['country'] == 'Panama'),
# # #     (map_df['country'] == 'Papua New Guinea'),
# # #     (map_df['country'] == 'Paraguay'),
# # #     (map_df['country'] == 'Peru'),
# # #     (map_df['country'] == 'Philippines'),
# # #     (map_df['country'] == 'Poland'),
# # #     (map_df['country'] == 'Portugal'),
# # #     (map_df['country'] == 'Qatar'),
# # #     (map_df['country'] == 'Romania'),
# # #     (map_df['country'] == 'Russia'),
# # #     (map_df['country'] == 'Rwanda'),
# # #     (map_df['country'] == 'Saint Kitts and Nevis'),
# # #     (map_df['country'] == 'Saint Lucia'),
# # #     (map_df['country'] == 'Saint Vincent and the Grenadines'),
# # #     (map_df['country'] == 'Samoa'),
# # #     (map_df['country'] == 'San Marino'),
# # #     (map_df['country'] == 'Sao Tome and Principe'),
# # #     (map_df['country'] == 'Saudi Arabia'),
# # #     (map_df['country'] == 'Senegal'),
# # #     (map_df['country'] == 'Serbia'),
# # #     (map_df['country'] == 'Seychelles'),
# # #     (map_df['country'] == 'Sierra Leone'),
# # #     (map_df['country'] == 'Singapore'),
# # #     (map_df['country'] == 'Slovakia'),
# # #     (map_df['country'] == 'Slovenia'),
# # #     (map_df['country'] == 'Solomon Islands'),
# # #     (map_df['country'] == 'Somalia'),
# # #     (map_df['country'] == 'South Africa'),
# # #     (map_df['country'] == 'South Korea'),
# # #     (map_df['country'] == 'South Sudan'),
# # #     (map_df['country'] == 'Spain'),
# # #     (map_df['country'] == 'Sri Lanka'),
# # #     (map_df['country'] == 'Sudan'),
# # #     (map_df['country'] == 'Suriname'),
# # #     (map_df['country'] == 'Sweden'),
# # #     (map_df['country'] == 'Switzerland'),
# # #     (map_df['country'] == 'Syria'),
# # #     (map_df['country'] == 'Taiwan'),
# # #     (map_df['country'] == 'Tajikistan'),
# # #     (map_df['country'] == 'Tanzania'),
# # #     (map_df['country'] == 'Thailand'),
# # #     (map_df['country'] == 'Timor-Leste'),
# # #     (map_df['country'] == 'Togo'),
# # #     (map_df['country'] == 'Tonga'),
# # #     (map_df['country'] == 'Trinidad and Tobago'),
# # #     (map_df['country'] == 'Tunisia'),
# # #     (map_df['country'] == 'Turkey'),
# # #     (map_df['country'] == 'Turkmenistan'),
# # #     (map_df['country'] == 'Tuvalu'),
# # #     (map_df['country'] == 'Uganda'),
# # #     (map_df['country'] == 'Ukraine'),
# # #     (map_df['country'] == 'United Arab Emirates (UAE)'),
# # #     (map_df['country'] == 'United Kingdom (UK)'),
# # #     (map_df['country'] == 'United States of America (USA)'),
# # #     (map_df['country'] == 'Uruguay'),
# # #     (map_df['country'] == 'Uzbekistan'),
# # #     (map_df['country'] == 'Vanuatu'),
# # #     (map_df['country'] == 'Vatican City'),
# # #     (map_df['country'] == 'Venezuela'),
# # #     (map_df['country'] == 'Vietnam'),
# # #     (map_df['country'] == 'Yemen'),
# # #     (map_df['country'] == 'Zambia'),
# # #     (map_df['country'] == 'Zimbabwe'),
# # #
# # # ]
# # # choices1 = [23.42, 33.93, 41.15, 28.03, 42.50, 11.20, 17.06, 38.41, 40.06, 25.27, 47.51, 40.14, 25.03, 26.06,
# # #             23.68,
# # #             13.19, 53.70, 50.50, 17.18, 9.30, 27.51, 16.29, 43.91, 22.32, 14.23, 4.53, 42.73, 12.23, 3.37,
# # #             16.53, 12.56,
# # #             7.36, 56.13, 6.61, 15.45, 35.67, 35.86, 4.57, 11.64, 0.22, 9.74, 7.54, 45.10, 21.52, 35.12, 49.81,
# # #             4.03,
# # #             56.26, 11.82, 15.41, 18.73, 1.83, 26.82, 13.79, 1.65, 15.17, 58.59, 26.52, 9.14, 17.71, 61.92,
# # #             46.22, 0.80,
# # #             13.44, 42.31, 51.16, 7.94, 39.07, 12.11, 15.78, 9.94, 11.80, 4.86, 18.97, 15.20, 47.16, 64.96,
# # #             20.59, 0.78,
# # #             32.42, 33.22, 53.14, 31.04, 41.87, 18.10, 36.20, 30.58, 48.01, 0.02, 3.37, 42.60, 29.31, 41.20,
# # #             19.85,
# # #             59.87, 33.85, 29.61, 6.42, 26.33, 47.16, 55.16, 49.81, 18.76, 13.25, 4.21, 3.20, 17.57, 35.93, 7.13,
# # #             21.00,
# # #             20.34, 23.63, 7.42, 47.41, 43.73, 46.86, 42.70, 31.79, 18.66, 21.91, 22.95, 0.52, 28.39, 52.13,
# # #             40.90,
# # #             12.86, 17.60, 9.08, 40.33, 41.60, 60.47, 21.47, 30.37, 7.51, 31.95, 8.53, 6.31, 23.44, 9.19, 12.87,
# # #             51.91,
# # #             39.39, 25.35, 45.94, 61.52, 1.94, 17.35, 13.90, 12.98, 13.75, 43.94, 0.18, 23.88, 14.49, 44.01,
# # #             4.67, 8.46,
# # #             1.35, 48.66, 46.15, 9.64, 5.15, 30.55, 35.90, 6.87, 40.46, 7.87, 12.86, 3.91, 60.12, 46.81, 34.80,
# # #             23.69,
# # #             38.86, 6.36, 15.87, 8.87, 8.61, 21.17, 10.69, 33.88, 38.96, 38.96, 7.10, 1.37, 48.37, 23.42, 55.37,
# # #             37.09,
# # #             32.52, 41.37, 15.37, 41.90, 6.42, 14.05, 15.55, 13.13, 19.01]
# # # map_df['lat'] = np.select(conditions1, choices1, default=0)
# # # conditions2 = [
# # #     (map_df['country'] == 'UAE'),
# # #     (map_df['country'] == 'Afghanistan'),
# # #     (map_df['country'] == 'Albania'),
# # #     (map_df['country'] == 'Algeria'),
# # #     (map_df['country'] == 'Andorra'),
# # #     (map_df['country'] == 'Angola'),
# # #     (map_df['country'] == 'Antigua and Barbuda'),
# # #     (map_df['country'] == 'Argentina'),
# # #     (map_df['country'] == 'Armenia'),
# # #     (map_df['country'] == 'Australia'),
# # #     (map_df['country'] == 'Austria'),
# # #     (map_df['country'] == 'Azerbaijan'),
# # #     (map_df['country'] == 'Bahamas'),
# # #     (map_df['country'] == 'Bahrain'),
# # #     (map_df['country'] == 'Bangladesh'),
# # #     (map_df['country'] == 'Barbados'),
# # #     (map_df['country'] == 'Belarus'),
# # #     (map_df['country'] == 'Belgium'),
# # #     (map_df['country'] == 'Belize'),
# # #     (map_df['country'] == 'Benin'),
# # #     (map_df['country'] == 'Bhutan'),
# # #     (map_df['country'] == 'Bolivia'),
# # #     (map_df['country'] == 'Bosnia and Herzegovina'),
# # #     (map_df['country'] == 'Botswana'),
# # #     (map_df['country'] == 'Brazil'),
# # #     (map_df['country'] == 'Brunei'),
# # #     (map_df['country'] == 'Bulgaria'),
# # #     (map_df['country'] == 'Burkina Faso'),
# # #     (map_df['country'] == 'Burundi'),
# # #     (map_df['country'] == 'Cabo Verde'),
# # #     (map_df['country'] == 'Cambodia'),
# # #     (map_df['country'] == 'Cameroon'),
# # #     (map_df['country'] == 'Canada'),
# # #     (map_df['country'] == 'Central African Republic (CAR)'),
# # #     (map_df['country'] == 'Chad'),
# # #     (map_df['country'] == 'Chile'),
# # #     (map_df['country'] == 'China'),
# # #     (map_df['country'] == 'Colombia'),
# # #     (map_df['country'] == 'Comoros'),
# # #     (map_df['country'] == 'Congo (Congo-Brazzaville)'),
# # #     (map_df['country'] == 'Costa Rica'),
# # #     (map_df['country'] == 'Cote d’Ivoire'),
# # #     (map_df['country'] == 'Croatia'),
# # #     (map_df['country'] == 'Cuba'),
# # #     (map_df['country'] == 'Cyprus'),
# # #     (map_df['country'] == 'Czechia'),
# # #     (map_df['country'] == 'Democratic Republic of the Congo'),
# # #     (map_df['country'] == 'Denmark'),
# # #     (map_df['country'] == 'Djibouti'),
# # #     (map_df['country'] == 'Dominica'),
# # #     (map_df['country'] == 'Dominican Republic'),
# # #     (map_df['country'] == 'Ecuador'),
# # #     (map_df['country'] == 'Egypt'),
# # #     (map_df['country'] == 'El Salvador'),
# # #     (map_df['country'] == 'Equatorial Guinea'),
# # #     (map_df['country'] == 'Eritrea'),
# # #     (map_df['country'] == 'Estonia'),
# # #     (map_df['country'] == 'Eswatini'),
# # #     (map_df['country'] == 'Ethiopia'),
# # #     (map_df['country'] == 'Fiji'),
# # #     (map_df['country'] == 'Finland'),
# # #     (map_df['country'] == 'France'),
# # #     (map_df['country'] == 'Gabon'),
# # #     (map_df['country'] == 'Gambia'),
# # #     (map_df['country'] == 'Georgia'),
# # #     (map_df['country'] == 'Germany'),
# # #     (map_df['country'] == 'Ghana'),
# # #     (map_df['country'] == 'Greece'),
# # #     (map_df['country'] == 'Grenada'),
# # #     (map_df['country'] == 'Guatemala'),
# # #     (map_df['country'] == 'Guinea'),
# # #     (map_df['country'] == 'Guinea-Bissau'),
# # #     (map_df['country'] == 'Guyana'),
# # #     (map_df['country'] == 'Haiti'),
# # #     (map_df['country'] == 'Honduras'),
# # #     (map_df['country'] == 'Hungary'),
# # #     (map_df['country'] == 'Iceland'),
# # #     (map_df['country'] == 'India'),
# # #     (map_df['country'] == 'Indonesia'),
# # #     (map_df['country'] == 'Iran'),
# # #     (map_df['country'] == 'Iraq'),
# # #     (map_df['country'] == 'Ireland'),
# # #     (map_df['country'] == 'Israel'),
# # #     (map_df['country'] == 'Italy'),
# # #     (map_df['country'] == 'Jamaica'),
# # #     (map_df['country'] == 'Japan'),
# # #     (map_df['country'] == 'Jordan'),
# # #     (map_df['country'] == 'Kazakhstan'),
# # #     (map_df['country'] == 'Kenya'),
# # #     (map_df['country'] == 'Kiribati'),
# # #     (map_df['country'] == 'Kosovo'),
# # #     (map_df['country'] == 'Kuwait'),
# # #     (map_df['country'] == 'Kyrgyzstan'),
# # #     (map_df['country'] == 'Laos'),
# # #     (map_df['country'] == 'Latvia'),
# # #     (map_df['country'] == 'Lebanon'),
# # #     (map_df['country'] == 'Lesotho'),
# # #     (map_df['country'] == 'Liberia'),
# # #     (map_df['country'] == 'Libya'),
# # #     (map_df['country'] == 'Liechtenstein'),
# # #     (map_df['country'] == 'Lithuania'),
# # #     (map_df['country'] == 'Luxembourg'),
# # #     (map_df['country'] == 'Madagascar'),
# # #     (map_df['country'] == 'Malawi'),
# # #     (map_df['country'] == 'Malaysia'),
# # #     (map_df['country'] == 'Maldives'),
# # #     (map_df['country'] == 'Mali'),
# # #     (map_df['country'] == 'Malta'),
# # #     (map_df['country'] == 'Marshall Islands'),
# # #     (map_df['country'] == 'Mauritania'),
# # #     (map_df['country'] == 'Mauritius'),
# # #     (map_df['country'] == 'Mexico'),
# # #     (map_df['country'] == 'Micronesia'),
# # #     (map_df['country'] == 'Moldova'),
# # #     (map_df['country'] == 'Monaco'),
# # #     (map_df['country'] == 'Mongolia'),
# # #     (map_df['country'] == 'Montenegro'),
# # #     (map_df['country'] == 'Morocco'),
# # #     (map_df['country'] == 'Mozambique'),
# # #     (map_df['country'] == 'Myanmar'),
# # #     (map_df['country'] == 'Namibia'),
# # #     (map_df['country'] == 'Nauru'),
# # #     (map_df['country'] == 'Nepal'),
# # #     (map_df['country'] == 'Netherlands'),
# # #     (map_df['country'] == 'New Zealand'),
# # #     (map_df['country'] == 'Nicaragua'),
# # #     (map_df['country'] == 'Niger'),
# # #     (map_df['country'] == 'Nigeria'),
# # #     (map_df['country'] == 'North Korea'),
# # #     (map_df['country'] == 'North Macedonia'),
# # #     (map_df['country'] == 'Norway'),
# # #     (map_df['country'] == 'Oman'),
# # #     (map_df['country'] == 'Pakistan'),
# # #     (map_df['country'] == 'Palau'),
# # #     (map_df['country'] == 'Palestine'),
# # #     (map_df['country'] == 'Panama'),
# # #     (map_df['country'] == 'Papua New Guinea'),
# # #     (map_df['country'] == 'Paraguay'),
# # #     (map_df['country'] == 'Peru'),
# # #     (map_df['country'] == 'Philippines'),
# # #     (map_df['country'] == 'Poland'),
# # #     (map_df['country'] == 'Portugal'),
# # #     (map_df['country'] == 'Qatar'),
# # #     (map_df['country'] == 'Romania'),
# # #     (map_df['country'] == 'Russia'),
# # #     (map_df['country'] == 'Rwanda'),
# # #     (map_df['country'] == 'Saint Kitts and Nevis'),
# # #     (map_df['country'] == 'Saint Lucia'),
# # #     (map_df['country'] == 'Saint Vincent and the Grenadines'),
# # #     (map_df['country'] == 'Samoa'),
# # #     (map_df['country'] == 'San Marino'),
# # #     (map_df['country'] == 'Sao Tome and Principe'),
# # #     (map_df['country'] == 'Saudi Arabia'),
# # #     (map_df['country'] == 'Senegal'),
# # #     (map_df['country'] == 'Serbia'),
# # #     (map_df['country'] == 'Seychelles'),
# # #     (map_df['country'] == 'Sierra Leone'),
# # #     (map_df['country'] == 'Singapore'),
# # #     (map_df['country'] == 'Slovakia'),
# # #     (map_df['country'] == 'Slovenia'),
# # #     (map_df['country'] == 'Solomon Islands'),
# # #     (map_df['country'] == 'Somalia'),
# # #     (map_df['country'] == 'South Africa'),
# # #     (map_df['country'] == 'South Korea'),
# # #     (map_df['country'] == 'South Sudan'),
# # #     (map_df['country'] == 'Spain'),
# # #     (map_df['country'] == 'Sri Lanka'),
# # #     (map_df['country'] == 'Sudan'),
# # #     (map_df['country'] == 'Suriname'),
# # #     (map_df['country'] == 'Sweden'),
# # #     (map_df['country'] == 'Switzerland'),
# # #     (map_df['country'] == 'Syria'),
# # #     (map_df['country'] == 'Taiwan'),
# # #     (map_df['country'] == 'Tajikistan'),
# # #     (map_df['country'] == 'Tanzania'),
# # #     (map_df['country'] == 'Thailand'),
# # #     (map_df['country'] == 'Timor-Leste'),
# # #     (map_df['country'] == 'Togo'),
# # #     (map_df['country'] == 'Tonga'),
# # #     (map_df['country'] == 'Trinidad and Tobago'),
# # #     (map_df['country'] == 'Tunisia'),
# # #     (map_df['country'] == 'Turkey'),
# # #     (map_df['country'] == 'Turkmenistan'),
# # #     (map_df['country'] == 'Tuvalu'),
# # #     (map_df['country'] == 'Uganda'),
# # #     (map_df['country'] == 'Ukraine'),
# # #     (map_df['country'] == 'United Arab Emirates (UAE)'),
# # #     (map_df['country'] == 'United Kingdom (UK)'),
# # #     (map_df['country'] == 'United States of America (USA)'),
# # #     (map_df['country'] == 'Uruguay'),
# # #     (map_df['country'] == 'Uzbekistan'),
# # #     (map_df['country'] == 'Vanuatu'),
# # #     (map_df['country'] == 'Vatican City'),
# # #     (map_df['country'] == 'Venezuela'),
# # #     (map_df['country'] == 'Vietnam'),
# # #     (map_df['country'] == 'Yemen'),
# # #     (map_df['country'] == 'Zambia'),
# # #     (map_df['country'] == 'Zimbabwe'),
# # #
# # # ]
# # # choices2 = [53.84, 67.71, 20.16, 1.65, 1.52, 17.87, 61.79, 63.61, 45.03, 133.77, 14.55, 47.57, 77.39, 50.55,
# # #             90.35,
# # #             59.54, 27.95, 4.46, 88.49, 2.31, 90.43, 63.58, 17.67, 24.68, 51.92, 114.72, 25.48, 1.56, 29.91,
# # #             23.04,
# # #             104.99, 12.35, 106.34, 20.93, 18.73, 71.54, 104.19, 74.29, 43.33, 15.82, 83.75, 5.54, 15.20, 77.78,
# # #             33.42,
# # #             15.47, 21.75, 9.50, 42.59, 61.37, 70.16, 78.18, 30.80, 88.89, 10.26, 39.78, 25.01, 31.46, 40.48,
# # #             178.06,
# # #             25.74, 2.21, 11.60, 15.31, 43.35, 10.45, 1.02, 21.82, 61.67, 90.23, 9.69, 15.18, 58.93, 72.28,
# # #             86.24, 19.50,
# # #             19.02, 78.96, 113.92, 53.68, 43.67, 7.69, 34.85, 12.56, 77.29, 138.25, 36.23, 66.92, 37.90, 168.73,
# # #             20.90,
# # #             47.48, 74.76, 102.49, 24.60, 35.86, 28.23, 9.42, 17.22, 9.55, 23.88, 6.12, 46.86, 34.30, 101.97,
# # #             73.22,
# # #             3.99, 14.37, 171.18, 10.94, 57.55, 102.55, 150.55, 28.36, 7.42, 103.84, 19.37, 7.09, 35.52, 95.95,
# # #             18.49,
# # #             166.93, 84.12, 5.29, 174.88, 85.20, 8.08, 8.67, 127.51, 21.74, 8.46, 55.97, 69.34, 134.58, 35.23,
# # #             80.78,
# # #             143.95, 58.44, 75.01, 121.77, 19.14, 8.22, 51.18, 24.96, 105.31, 29.87, 62.78, 60.97, 61.28, 172.10,
# # #             12.45,
# # #             6.61, 45.07, 14.45, 21.00, 55.49, 11.77, 103.81, 19.69, 14.99, 160.15, 46.19, 22.93, 127.76, 31.30,
# # #             3.74,
# # #             80.77, 30.21, 56.02, 18.64, 8.22, 38.99, 120.96, 71.27, 34.88, 100.99, 125.72, 0.82, 175.19, 61.22,
# # #             9.53,
# # #             35.24, 59.55, 177.64, 32.29, 31.16, 53.84, 3.43, 95.71, 55.76, 64.58, 166.95, 12.45, 66.58, 108.27,
# # #             48.51,
# # #             27.84, 20.15]
# # # map_df['lon'] = np.select(conditions2, choices2, default=0)
# # #
# # # # assignment in map dataframe of lat and lon
# # # map_df['BOOLa'] = map_df['lat'].duplicated(keep='first')
# # # for j in range(map_df['lat'].count()):
# # #     map_df['BOOLa'] = map_df['lat'].duplicated(keep='first')
# # #     for i in range(map_df['lat'].count()):
# # #         if map_df.loc[i, 'BOOLa']:
# # #             map_df.loc[i, 'lat'] = map_df.loc[i, 'lat'] + 0.05
# # #         else:
# # #             map_df.loc[i, 'lat'] = map_df.loc[i, 'lat']
# # #
# # # # assign map sub bu's and total without losing true sub bu
# # # map_options = pd.DataFrame()
# # # map_options['country'] = map_df['country'].unique()
# # #
# # # map_df332 = map_df.groupby(['country', 'SubBU', 'jobs', 'Type'], as_index=False).size()
# # # map_df332 = map_df332.reset_index()
# # # map_df33 = pd.DataFrame()
# # # map_df33['country'] = map_df332['country']
# # # map_df33['SubBU'] = map_df332['SubBU']
# # # map_df33['jobs'] = map_df332['jobs']
# # # map_df33['Type'] = map_df332['Type']
# # #
# # # map_df33 = map_df33.groupby(['country', 'SubBU'], as_index=False).size()
# # # map_df33 = map_df33.reset_index()
# # #
# # # map_df3 = pd.DataFrame()
# # # map_df3['Num'] = map_df33[0]
# # # map_df3['country'] = map_df33['country']
# # # map_df3['SubBU'] = map_df33['SubBU']
# # #
# # # # country assignment after sub bu assignment
# # # countries_df = pd.DataFrame()
# # # countries_df['countries'] = ['UAE', 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',
# # #                              'Antigua and Barbuda',
# # #                              'Argentina', 'Armenia', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas', 'Bahrain',
# # #                              'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bhutan',
# # #                              'Bolivia',
# # #                              'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',
# # #                              'Burkina Faso',
# # #                              'Burundi', 'Cabo Verde', 'Cambodia', 'Cameroon', 'Canada',
# # #                              'Central African Republic',
# # #                              'Chad',
# # #                              'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'CostaRica', 'Cote d’Ivoire',
# # #                              'Croatia',
# # #                              'Cuba', 'Cyprus', 'Czechia', 'Democratic Republic of the Congo', 'Denmark',
# # #                              'Djibouti',
# # #                              'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'ElSalvador',
# # #                              'Equatorial Guinea',
# # #                              'Eritrea', 'Estonia', 'Eswatini', 'Ethiopia', 'Fiji', 'Finland', 'France', 'Gabon',
# # #                              'Gambia', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Grenada', 'Guatemala',
# # #                              'Guinea',
# # #                              'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Hungary', 'Iceland', 'India',
# # #                              'Indonesia',
# # #                              'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',
# # #                              'Kazakhstan',
# # #                              'Kenya', 'Kiribati', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia', 'Lebanon',
# # #                              'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg',
# # #                              'Madagascar',
# # #                              'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands',
# # #                              'Mauritania',
# # #                              'Mauritius', 'Mexico', 'Micronesia', 'Moldova', 'Monaco', 'Mongolia', 'Montenegro',
# # #                              'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal', 'Netherlands',
# # #                              'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'North Korea', 'North Macedonia',
# # #                              'Norway',
# # #                              'Oman', 'Pakistan', 'Palau', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',
# # #                              'Peru',
# # #                              'Philippines', 'Poland', 'Portugal', 'Qatar', 'Romania', 'Russia', 'Rwanda',
# # #                              'Saint Kitts and Nevis', 'SaintLucia', 'Saint Vincent and the Grenadines', 'Samoa',
# # #                              'San Marino',
# # #                              'Sao Tome and Principe', 'Saudi Arabia', 'Senegal', 'Serbia', 'Seychelles',
# # #                              'SierraLeone',
# # #                              'Singapore', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa',
# # #                              'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Sweden',
# # #                              'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',
# # #                              'Timor-Leste',
# # #                              'Togo', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan',
# # #                              'Tuvalu',
# # #                              'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom',
# # #                              'United States of America',
# # #                              'Uruguay', 'Uzbekistan', 'Vanuatu', 'VaticanCity', 'Venezuela', 'Vietnam', 'Yemen',
# # #                              'Zambia', 'Zimbabwe']
# # # countries_df['lat'] = [23.42, 33.93, 41.15, 28.03, 42.50, 11.20, 17.06, 38.41, 40.06, 25.27, 47.51, 40.14,
# # #                        25.03, 26.06,
# # #                        23.68,
# # #                        13.19, 53.70, 50.50, 17.18, 9.30, 27.51, 16.29, 43.91, 22.32, 14.23, 4.53, 42.73, 12.23,
# # #                        3.37,
# # #                        16.53, 12.56,
# # #                        7.36, 56.13, 6.61, 15.45, 35.67, 35.86, 4.57, 11.64, 0.22, 9.74, 7.54, 45.10, 21.52,
# # #                        35.12,
# # #                        49.81, 4.03,
# # #                        56.26, 11.82, 15.41, 18.73, 1.83, 26.82, 13.79, 1.65, 15.17, 58.59, 26.52, 9.14, 17.71,
# # #                        61.92,
# # #                        46.22, 0.80,
# # #                        13.44, 42.31, 51.16, 7.94, 39.07, 12.11, 15.78, 9.94, 11.80, 4.86, 18.97, 15.20, 47.16,
# # #                        64.96,
# # #                        20.59, 0.78,
# # #                        32.42, 33.22, 53.14, 31.04, 41.87, 18.10, 36.20, 30.58, 48.01, 0.02, 3.37, 42.60, 29.31,
# # #                        41.20,
# # #                        19.85,
# # #                        59.87, 33.85, 29.61, 6.42, 26.33, 47.16, 55.16, 49.81, 18.76, 13.25, 4.21, 3.20, 17.57,
# # #                        35.93,
# # #                        7.13, 21.00,
# # #                        20.34, 23.63, 7.42, 47.41, 43.73, 46.86, 42.70, 31.79, 18.66, 21.91, 22.95, 0.52, 28.39,
# # #                        52.13,
# # #                        40.90,
# # #                        12.86, 17.60, 9.08, 40.33, 41.60, 60.47, 21.47, 30.37, 7.51, 31.95, 8.53, 6.31, 23.44,
# # #                        9.19,
# # #                        12.87, 51.91,
# # #                        39.39, 25.35, 45.94, 61.52, 1.94, 17.35, 13.90, 12.98, 13.75, 43.94, 0.18, 23.88, 14.49,
# # #                        44.01,
# # #                        4.67, 8.46,
# # #                        1.35, 48.66, 46.15, 9.64, 5.15, 30.55, 35.90, 6.87, 40.46, 7.87, 12.86, 3.91, 60.12,
# # #                        46.81,
# # #                        34.80, 23.69,
# # #                        38.86, 6.36, 15.87, 8.87, 8.61, 21.17, 10.69, 33.88, 38.96, 38.96, 7.10, 1.37, 48.37,
# # #                        23.42,
# # #                        55.37, 37.09,
# # #                        32.52, 41.37, 15.37, 41.90, 6.42, 14.05, 15.55, 13.13, 19.01]
# # # countries_df['lon'] = [53.84, 67.71, 20.16, 1.65, 1.52, 17.87, 61.79, 63.61, 45.03, 133.77, 14.55, 47.57, 77.39,
# # #                        50.55,
# # #                        90.35,
# # #                        59.54, 27.95, 4.46, 88.49, 2.31, 90.43, 63.58, 17.67, 24.68, 51.92, 114.72, 25.48, 1.56,
# # #                        29.91,
# # #                        23.04,
# # #                        104.99, 12.35, 106.34, 20.93, 18.73, 71.54, 104.19, 74.29, 43.33, 15.82, 83.75, 5.54,
# # #                        15.20,
# # #                        77.78, 33.42,
# # #                        15.47, 21.75, 9.50, 42.59, 61.37, 70.16, 78.18, 30.80, 88.89, 10.26, 39.78, 25.01, 31.46,
# # #                        40.48,
# # #                        178.06,
# # #                        25.74, 2.21, 11.60, 15.31, 43.35, 10.45, 1.02, 21.82, 61.67, 90.23, 9.69, 15.18, 58.93,
# # #                        72.28,
# # #                        86.24, 19.50,
# # #                        19.02, 78.96, 113.92, 53.68, 43.67, 7.69, 34.85, 12.56, 77.29, 138.25, 36.23, 66.92,
# # #                        37.90,
# # #                        168.73, 20.90,
# # #                        47.48, 74.76, 102.49, 24.60, 35.86, 28.23, 9.42, 17.22, 9.55, 23.88, 6.12, 46.86, 34.30,
# # #                        101.97,
# # #                        73.22,
# # #                        3.99, 14.37, 171.18, 10.94, 57.55, 102.55, 150.55, 28.36, 7.42, 103.84, 19.37, 7.09,
# # #                        35.52,
# # #                        95.95, 18.49,
# # #                        166.93, 84.12, 5.29, 174.88, 85.20, 8.08, 8.67, 127.51, 21.74, 8.46, 55.97, 69.34,
# # #                        134.58, 35.23,
# # #                        80.78,
# # #                        143.95, 58.44, 75.01, 121.77, 19.14, 8.22, 51.18, 24.96, 105.31, 29.87, 62.78, 60.97,
# # #                        61.28,
# # #                        172.10, 12.45,
# # #                        6.61, 45.07, 14.45, 21.00, 55.49, 11.77, 103.81, 19.69, 14.99, 160.15, 46.19, 22.93,
# # #                        127.76,
# # #                        31.30, 3.74,
# # #                        80.77, 30.21, 56.02, 18.64, 8.22, 38.99, 120.96, 71.27, 34.88, 100.99, 125.72, 0.82,
# # #                        175.19,
# # #                        61.22, 9.53,
# # #                        35.24, 59.55, 177.64, 32.29, 31.16, 53.84, 3.43, 95.71, 55.76, 64.58, 166.95, 12.45,
# # #                        66.58,
# # #                        108.27, 48.51,
# # #                        27.84, 20.15]
# # # for i in range(countries_df['countries'].count()):
# # #     for j in range(map_df3['country'].count()):
# # #         if map_df3.loc[j, 'country'] == countries_df.loc[i, 'countries']:
# # #             map_df3.loc[j, 'lat'] = countries_df.loc[i, 'lat']
# # #             map_df3.loc[j, 'lon'] = countries_df.loc[i, 'lon']
# # #
# # # # </editor-fold>
# #
# # from Classes import Person
# #
# # p1 = Person("John", 36)
# #
# # print(p1.name)
# # print(p1.age)
# #
# # b = k       offshore
# # c = v       risk
# # d = l       liability
# # e = w       type
# #
# #
# # REP
# # =IF(OR(AND($K$4="Onshore",OR($V$4=1,$V$4=2),W4="Type 2"),
# #     AND($K$4="Offshore",$V$4=0,W4="Type 3")),"SA",IF(AND($K$4="Onshore",$V$4=0,W4="Type 3"),"Yes","N/A"))
# #
# # SR
# # =IF(OR(AND(K4="Onshore",V4>2,W4="Type 1"),
# # AND(K4="Offshore",OR(V4=2,V4=1),W4="Type 2",L4="N/A"),AND(K4="Offshore",V4<2,W4="Type 2",L4="High")),"SA",
# # (IF(OR(AND(K4="Offshore",V4>2,W4="Type 1",L4="N/A"),AND(K4="Offshore",V4>1,W4="Type 1",L4="High")),"N/A","Yes")))
# #
# # spec
# # =IF(OR(AND(W4="Type 1",V4>2,K4="OffShore",L4="N/A"),AND(W4="Type 1",V4>1,K4="OffShore",L4="High")),"SA","Yes")
# #
# # approvers
# # =IF(AND(K4="Onshore",V4=0,W4="Type 3"),
# # "N/A","FISE Reg. Sr Manager/Director (3) + TESA Reg. Manager")
# #
# # authorizers
# # =IF(AND(K4="Onshore",V4=0,W4="Type 3"),"N/A",IF(OR(AND(K4="Onshore",W4="Type 2"),
# # AND(K4="Offshore",W4="Type 3")),"TESA Regional Head","TESA Sr. Director"))
# #
# # notification
# # =IF(AND(K4="Onshore",W4="Type 1"),"BU Director + O&G Tech. VP + SC Services VP + positions in Type 2 Above",
# # IF(AND(L4="N/A",W4="Type 2"),"BU Director + Sub BU Director + SUCH Regional VP + TESA Sr. Director + SC FISE Director",
# # IF(AND(K4="Onshore",W4="Type 2"),"Sub BU Director + SUCH Regional VP + TESA Sr. Director + SC FISE Director",
# # IF(OR(L4="High",AND(L4="N/A",K4="Offshore",W4="Type 1")),"O&G Tech. VP + SC Services VP + positions in Type 2 above","N/A"))))
# #
# # pre job call
# # =IF(W4="Type 1","O&G Tech VP and/or SC Services VP","N/A")
# # #


# AIzaSyC6M_5JWcFcbvrQHt5JOwCOb5E7mGSdpDk
#   covid19service@covid19-270910.iam.gserviceaccount.com


import pandas as pd
import dash
import dash_table
import dash_core_components as dcc
import dash_html_components as html
import os
import numpy as np
from datetime import datetime as dt

# <editor-fold desc="Data">
df = pd.read_excel('ca/covid.xlsx')
df = df.dropna(thresh=4)
df.reset_index(inplace=True, drop=True)
df.sort_values(by='Country')
countries = df['Country']
countries = sorted(countries.to_list())
population = {'China': 1439323776
    , 'India': 1380004385
    , 'United States': 331002651
    , 'Indonesia': 273523615
    , 'Pakistan': 220892340
    , 'Brazil': 212559417
    , 'Nigeria': 206139589
    , 'Bangladesh': 164689383
    , 'Russia': 145934462
    , 'Mexico': 128932753
    , 'Japan': 126476461
    , 'Ethiopia': 114963588
    , 'Philippines': 109581078
    , 'Egypt': 102334404
    , 'Vietnam': 97338579
    , 'DR Congo': 89561403
    , 'Turkey': 84339067
    , 'Iran': 83992949
    , 'Germany': 83783942
    , 'Thailand': 69799978
    , 'United Kingdom': 67886011
    , 'France': 65273511
    , 'Italy': 60461826
    , 'Tanzania': 59734218
    , 'South Africa': 59308690
    , 'Myanmar': 54409800
    , 'Kenya': 53771296
    , 'South Korea': 51269185
    , 'Colombia': 50882891
    , 'Spain': 46754778
    , 'Uganda': 45741007
    , 'Argentina': 45195774
    , 'Algeria': 43851044
    , 'Sudan': 43849260
    , 'Ukraine': 43733762
    , 'Iraq': 40222493
    , 'Afghanistan': 38928346
    , 'Poland': 37846611
    , 'Canada': 37742154
    , 'Morocco': 36910560
    , 'Saudi Arabia': 34813871
    , 'Uzbekistan': 33469203
    , 'Peru': 32971854
    , 'Angola': 32866272
    , 'Malaysia': 32365999
    , 'Mozambique': 31255435
    , 'Ghana': 31072940
    , 'Yemen': 29825964
    , 'Nepal': 29136808
    , 'Venezuela': 28435940
    , 'Madagascar': 27691018
    , 'Cameroon': 26545863
    , "Côte d'Ivoire": 26378274
    , 'North Korea': 25778816
    , 'Australia': 25499884
    , 'Niger': 24206644
    , 'Taiwan': 23816775
    , 'Sri Lanka': 21413249
    , 'Burkina Faso': 20903273
    , 'Mali': 20250833
    , 'Romania': 19237691
    , 'Malawi': 19129952
    , 'Chile': 19116201
    , 'Kazakhstan': 18776707
    , 'Zambia': 18383955
    , 'Guatemala': 17915568
    , 'Ecuador': 17643054
    , 'Syria': 17500658
    , 'Netherlands': 17134872
    , 'Senegal': 16743927
    , 'Cambodia': 16718965
    , 'Chad': 16425864
    , 'Somalia': 15893222
    , 'Zimbabwe': 14862924
    , 'Guinea': 13132795
    , 'Rwanda': 12952218
    , 'Benin': 12123200
    , 'Burundi': 11890784
    , 'Tunisia': 11818619
    , 'Bolivia': 11673021
    , 'Belgium': 11589623
    , 'Haiti': 11402528
    , 'Cuba': 11326616
    , 'South Sudan': 11193725
    , 'Dominican Republic': 10847910
    , 'Czech Republic (Czechia)': 10708981
    , 'Greece': 10423054
    , 'Jordan': 10203134
    , 'Portugal': 10196709
    , 'Azerbaijan': 10139177
    , 'Sweden': 10099265
    , 'Honduras': 9904607
    , 'United Arab Emirates': 9890402
    , 'Hungary': 9660351
    , 'Tajikistan': 9537645
    , 'Belarus': 9449323
    , 'Austria': 9006398
    , 'Papua New Guinea': 8947024
    , 'Serbia': 8737371
    , 'Israel': 8655535
    , 'Switzerland': 8654622
    , 'Togo': 8278724
    , 'Sierra Leone': 7976983
    , 'Hong Kong': 7496981
    , 'Laos': 7275560
    , 'Paraguay': 7132538
    , 'Bulgaria': 6948445
    , 'Libya': 6871292
    , 'Lebanon': 6825445
    , 'Nicaragua': 6624554
    , 'Kyrgyzstan': 6524195
    , 'El Salvador': 6486205
    , 'Turkmenistan': 6031200
    , 'Singapore': 5850342
    , 'Denmark': 5792202
    , 'Finland': 5540720
    , 'Congo': 5518087
    , 'Slovakia': 5459642
    , 'Norway': 5421241
    , 'Oman': 5106626
    , 'State of Palestine': 5101414
    , 'Costa Rica': 5094118
    , 'Liberia': 5057681
    , 'Ireland': 4937786
    , 'Central African Republic': 4829767
    , 'New Zealand': 4822233
    , 'Mauritania': 4649658
    , 'Panama': 4314767
    , 'Kuwait': 4270571
    , 'Croatia': 4105267
    , 'Moldova': 4033963
    , 'Georgia': 3989167
    , 'Eritrea': 3546421
    , 'Uruguay': 3473730
    , 'Bosnia and Herzegovina': 3280819
    , 'Mongolia': 3278290
    , 'Armenia': 2963243
    , 'Jamaica': 2961167
    , 'Qatar': 2881053
    , 'Albania': 2877797
    , 'Puerto Rico': 2860853
    , 'Lithuania': 2722289
    , 'Namibia': 2540905
    , 'Gambia': 2416668
    , 'Botswana': 2351627
    , 'Gabon': 2225734
    , 'Lesotho': 2142249
    , 'North Macedonia': 2083374
    , 'Slovenia': 2078938
    , 'Guinea-Bissau': 1968001
    , 'Latvia': 1886198
    , 'Bahrain': 1701575
    , 'Equatorial Guinea': 1402985
    , 'Trinidad and Tobago': 1399488
    , 'Estonia': 1326535
    , 'Timor-Leste': 1318445
    , 'Mauritius': 1271768
    , 'Cyprus': 1207359
    , 'Eswatini': 1160164
    , 'Djibouti': 988000
    , 'Fiji': 896445
    , 'Réunion': 895312
    , 'Comoros': 869601
    , 'Guyana': 786552
    , 'Bhutan': 771608
    , 'Solomon Islands': 686884
    , 'Macao': 649335
    , 'Montenegro': 628066
    , 'Luxembourg': 625978
    , 'Western Sahara': 597339
    , 'Suriname': 586632
    , 'Cabo Verde': 555987
    , 'Maldives': 540544
    , 'Malta': 441543
    , 'Brunei': 437479
    , 'Guadeloupe': 400124
    , 'Belize': 397628
    , 'Bahamas': 393244
    , 'Martinique': 375265
    , 'Iceland': 341243
    , 'Vanuatu': 307145
    , 'French Guiana': 298682
    , 'Barbados': 287375
    , 'New Caledonia': 285498
    , 'French Polynesia': 280908
    , 'Mayotte': 272815
    , 'Sao Tome & Principe': 219159
    , 'Samoa': 198414
    , 'Saint Lucia': 183627
    , 'Channel Islands': 173863
    , 'Guam': 168775
    , 'Curaçao': 164093
    , 'Kiribati': 119449
    , 'Micronesia': 115023
    , 'Grenada': 112523
    , 'St. Vincent & Grenadines': 110940
    , 'Aruba': 106766
    , 'Tonga': 105695
    , 'U.S. Virgin Islands': 104425
    , 'Seychelles': 98347
    , 'Antigua and Barbuda': 97929
    , 'Isle of Man': 85033
    , 'Andorra': 77265
    , 'Dominica': 71986
    , 'Cayman Islands': 65722
    , 'Bermuda': 62278
    , 'Marshall Islands': 59190
    , 'Northern Mariana Islands': 57559
    , 'Greenland': 56770
    , 'American Samoa': 55191
    , 'Saint Kitts & Nevis': 53199
    , 'Faeroe Islands': 48863
    , 'Sint Maarten': 42876
    , 'Monaco': 39242
    , 'Turks and Caicos': 38717
    , 'Saint Martin': 38666
    , 'Liechtenstein': 38128
    , 'San Marino': 33931
    , 'Gibraltar': 33691
    , 'British Virgin Islands': 30231
    , 'Caribbean Netherlands': 26223
    , 'Palau': 18094
    , 'Cook Islands': 17564
    , 'Anguilla': 15003
    , 'Tuvalu': 11792
    , 'Wallis & Futuna': 11239
    , 'Nauru': 10824
    , 'Saint Barthelemy': 9877
    , 'Saint Helena': 6077
    , 'Saint Pierre & Miquelon': 5794
    , 'Montserrat': 4992
    , 'Falkland Islands': 3480
    , 'Niue': 1626
    , 'Tokelau': 1357
    , 'Holy See': 801

              }
genders = {'Male': '', 'Female': ''}
diseases_d = {'None': 0.9, 'Cardiovascular Disease': 10.5, 'Diabetes': 7.3, 'Respiratory Disease': 6.3,
              'High Blood Pressure': 6, 'Cancer': 5.6}
age_0 = 0
age_10 = 0.2
age_20 = 0.2
age_30 = 0.2
age_40 = 0.4
age_50 = 1.3
age_60 = 3.6
age_70 = 8
age_80 = 14.8
# </editor-fold>

app = dash.Dash(__name__, external_stylesheets=['assets/codepen.css'])
app.layout = html.Div(style={'backgroundColor': '#ffffff', 'textAlign': 'center', }, children=[
    html.Br(),
    html.Div([
        html.H3(children='Corona Survival Calculator (Live Update)',
                style={'display': 'inline-block', 'width': '70%', 'textAlign': 'center'}), ]),
    html.Br(),
    html.Br(),
    html.Div([
        html.H1(children='', style={'width': '20%'}),

        dcc.RadioItems(
            id='gender',
            options=[{'label': k, 'value': k} for k in genders.keys()],
            value='Male',
            style={'textAlign': 'center', 'width': '60%', 'display': 'inline-block'}
        ), ]),
    html.Br(),
    html.Div([
        html.H1(children='', style={'width': '20%'}),
        dcc.Dropdown(
            id='diseases',
            options=[{'label': k, 'value': k} for k in diseases_d.keys()],
            placeholder="Select Applicable Diseases",
            multi=True,
            value="",
            style={'textAlign': 'center', 'width': '60%', 'display': 'inline-block'}
        ), ]),
    html.Div([
        html.H1(children='', style={'width': '20%'}),
        html.Br(),
        dcc.Dropdown(
            id='country',
            options=[{'label': n, 'value': n} for n in countries],
            placeholder="Select Country",
            style={'textAlign': 'center', 'width': '60%', 'display': 'inline-block'}
        ), ]),
    html.Div([
        html.H1(children='', style={'width': '20%'}),
        html.Br(),
        dcc.Input(id="age", type="number", placeholder="Age",
                  style={'textAlign': 'center', 'width': '20%', 'display': 'inline-block'}
                  ), ]),
    html.Br(),
    html.Br(),
    html.Br(),
    html.Br(),
    html.Div(id='out'),
])


@app.callback(
    dash.dependencies.Output('out', 'children'),
    [dash.dependencies.Input('age', 'value'),
     dash.dependencies.Input('gender', 'value'),
     dash.dependencies.Input('diseases', 'value'),
     dash.dependencies.Input('country', 'value')])
def update_output(age, gender, diseases, country):
    global df
    if age and country and diseases is not None:
        diseases_calc = 1
        if len(diseases) == 1:
            diseases_calc = diseases_d[diseases[0]]
        elif len(diseases) == 2:
            diseases_calc = diseases_d[diseases[0]] + diseases_d[diseases[1]]
        elif len(diseases) == 3:
            diseases_calc = diseases_d[diseases[0]] + diseases_d[diseases[1]] + diseases_d[diseases[2]]
        elif len(diseases) == 4:
            diseases_calc = diseases_d[diseases[0]] + diseases_d[diseases[1]] + diseases_d[diseases[2]] + \
                            diseases_d[diseases[3]]
        elif len(diseases) == 5:
            diseases_calc = diseases_d[diseases[0]] + diseases_d[diseases[1]] + diseases_d[diseases[2]] + \
                            diseases_d[diseases[3]] + diseases_d[diseases[4]]

        if 20 > age > 9 and gender == 'Male':
            return 'Your chances of getting infected are "{}" % '.format(df.loc[(df['Country'] == country).idxmax(),
                                                                                    'Total cases'] / population[country]
                                                                         * age_10) + \
                   'Your chances of dying if infected is "{}" %'.format(round(age_10 * diseases_calc, 6))


if __name__ == '__main__':
    app.run_server(debug=True)
